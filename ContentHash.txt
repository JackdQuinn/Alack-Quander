Type0  #Module1 #Lesson2#Page3#Content4 #QType 5#Question 6#Correct Answer7#Wrong Answer8#Wrong Answer9#Wrong Answer10#FIB1#FIB2
c #Basics  	#Intro 	#1    #Java is a general-purpose computer-programming language originally developed by James Gosling at Sun Microsystems and released in 1995.# #######
c #Basics  	#Intro 	#1    #Java gained widespread popularity for being Platform Independent, which means that you only need to write the program once to be able to run it on a number of different platforms!########
c #Basics  	#Intro 	#1    #Today java is one of the most popular languages in the world with over 9 million developers########
q #Basics  	#Intro 	#2    #        	#MC     #To distribute your application to different platforms, how many Java versions do you need to create?#Just one version#Two versions#One for each platform#42##
c #Basics  	#Intro  #3    #Java runs on more than 3 billion devices.  Java is used to develop apps for Google's Android OS, various Desktop Applications, Web Applications, Enterprise Applications (i.e. trading, inventory), and many more!########
c #Basics  	#Intro  #3    #Learn, practice, and then join the huge community of developers around the world creating the content of the future!########
q #Basics  	#Intro  #4    #        	#MC     #"Which one of the following statements is true?"#Java has a huge developer community#Java is used only in web and mobile applications#Java is used only in NASA's space related applications#Java was developed by Starbuck's for their web development needs######
c#Basics#Hello World#1#Your First Java Program, Let's start by creating a simple program printing “Hello World” to the screen.#
c#Basics#Hello World#1#Hello World was the first message displayed by the Macintosh personal computer in 1984 and is the traditional first program written when learning to code.#
c#Basics#Hello World#1# class Java101 {public static void main(String[ ] args) {System.out.println("Hello World");}}#
c#Basics#Hello World#1#In Java, every line of code that will run needs to be inside a class. In our example, we named the class Java101. You will learn more about classes in the upcoming modules.#
c#Basics#Hello World#1#In Java, each application has an entry point, or a starting point, which is a method called main. Along with main, the keywords public and static will also be explained later. 
c#Basics#Hello World#1#As a summary:(1) Every program in Java must have a class. (2)Every Java program starts from the main method.
q#Basics#Hello World#2#			#MC	#Which method is the starting point for all Java programs?#main#start#run#panic#
c#Basics#Hello World#3#The main Method \n \n To run our program, the main method must be identical to this signature: \n public static void main(String[ ] args) \n \n \n \n - public: anyone can access it \n - static: method can be run without creating an instance of the class containing the main method \n - void: method doesn't return any value \n - main: the name of the method
c#Basics#Hello World#4#For example, the following code declares a method called test, which does not return anything and has no parameters: \n void test() \n \n The method's parameters are declared inside the parentheses that follow the name of the method. \n For main, it's an array of strings called args. We will use it in our next lesson, so don't worry if you don't understand it all now.
q#Basics#Hello World#5#			#MC	# Declare a method called "hello()". \n \n \n void ______ ()#hello#main.hello#Hello# static Hello#
c#Basics#Hello World#6#System.out.println() \n \n Next is the body of the main method, enclosed in curly braces: \n { \n   System.out.println("Hello World!"); \n } \n \n The println method prints a line of text to the screen. \n The System class and its out stream are used to access the println method. \n In classes, methods, and other flow-control structures code is always enclosed in curly braces { }. \n
q#Basics#Hello World#7#			#MC	#Which method prints text in a Java program?#System.out.println()#System.printText()#out.writeText()#System.out()#
c#Basics#Hello World#8#Semicolons in Java \n \n You can pass a different text as the parameter to the println method to print it. \n class MyClass {\n  public static void main(String[ ] args) { \n   System.out.println("I am learning Java");\n } \n } \n \n In Java, each code statement must end with a semicolon. \n Remember: do not use semicolons after method and class declarations that follow with the body defined using the curly braces.
q#Basics#Hello World#9#			#MC	# Make a selection to create a valid Java program. \n \n  ______Apples { \n     public static void _______(String[ ]args) { \n    System.out.println("Hello, World!"); \n   } \n }# class, main# public, start# method, return# class, implements#
c#Basics#Java Comments#1#Comments \n \n The purpose of including comments in your code is to explain what the code is doing.\n Java supports both single and multi-line comments. All characters that appear within a comment are ignored by the Java compiler. \n \n A single-line comment starts with two forward slashes and continues until it reaches the end of the line. \n For example: \n // this is a single-line comment \n x = 5; // a single-line comment after code \n \n Adding comments as you write code is a good practice, because they provide clarification and understanding when you need to refer back to it, as well as for others who might need to read it. \n#
q#Basics#Java Comments#2#		#MC	#Single-line comments are created using:# // characters at the beginning of the line# ** characters at the beginning of the line # // characters at the end of the line # */ characters at the beginning of the line#
c#Basics#Java Comments#3#Multi-Line Comments \n \n Java also supports comments that span multiple lines. \n You start this type of comment with a forward slash followed by an asterisk, and end it with an asterisk followed by a forward slash. \n For example: \n /*  This is also a \n    comment spanning \n    multiple lines */ \n \n Note that Java does not support nested multi-line comments. \n However, you can nest single-line comments within multi-line comments. \n /* This is a single-line comment: \n \n    // a single-line comment \n \n */ \n \n Another name for a Multi-Line comment is a Block comment.#
q#Basics#Java Comments#4#		#MC	#Make this text a multi-line comment. \n \n __ some \n * comment text \n __ #open the comment with /* and close with */ # open the comment with */ and close with /* # open the comment with // and close with \\ # open the comment with "" and close with ' #   
c#Basics#Java Comments#5#Documentation Comments \n \n Documentation comments are special comments that have the appearance of multi-line comments, with the difference being that they generate external documentation of your source code. These begin with a forward slash followed by two asterisks, and end with an asterisk followed by a forward slash. \n For example: \n /** This is a documentation comment */ \n \n /** This is also a \n   documentation comment */ \n #
c#Basics#Java Comments#6#Javadoc is a tool which comes with JDK and it is used for generating Java code documentation in HTML format from Java source code which has required documentation in a predefined format.\n \n When a documentation comment begins with more than two asterisks, Javadoc assumes that you want to create a "box" around the comment in the source code. It simply ignores the extra asterisks. \n For example: \n /********************** \n \n This is the start of a method \n \n ***********************/ \n \n This will retain just the text "This is the start of a method" for the documentation.#
q#Basics#Java Comments#7#		#MC	#You can add a Java doc style comment by using: # /** and */ characters to wrap a comment.#// and */ characters to wrap a comment.#// characters in the beginning of the line. #/* and */ characters to wrap a comment.#
c#Basics#Variables	#1#Variables \n \n Variables store data for processing. \n A variable is given a name (or identifier), such as area, age, height, and the like. The name uniquely identifies each variable, assigning a value to the variable and retrieving the value stored.#
c#Basics#Variables	#2#Variables have types. Some examples: \n - int: for integers (whole numbers) such as 123 and -456 \n - double: for floating-point or real numbers with optional decimal points and fractional parts in fixed or scientific notations, such as 3.1416, -55.66. \n - String: for texts such as "Hello" or "Good Morning!". Text strings are enclosed within double quotes.#
c#Basics#Variables	#3#You can declare a variable of a type and assign it a value. Example: \n String name = "David"; \n \n This creates a variable called name of type String, and assigns it the value "David". \n It is important to note that a variable is associated with a type, and is only capable of storing values of that particular type. For example, an int variable can store integer values, such as 123; but it cannot store real numbers, such as 12.34, or texts, such as "Hello". #
q#Basics#Variables	#4#		#MC	#Which variable type would you use for a city name?# String # int # double # city#
c#Basics#Variables	#5#Declaring Variables \n \n Examples of variable declarations: \n class MyClass { \n public static void main(String[ ] args) { \n   String name ="David"; \n   int age = 42; \n   double score =15.9; \n   char group = 'Z'; \n  } \n } \n \n char stands for character and holds a single character. \n \n Another type is the Boolean type, which has only two possible values: true and false. \n This data type is used for simple flags that track true/false conditions. \n For example: \n boolean online = true; \n \n You can use a comma-separated list to declare more than one variable of the specified type. Example: int a = 42, b = 11; #
q#Basics#Variables	#6#		#MC	#Choose from the options below to have a valid Java program. \n class Apples { \n   public static void main(String[ ]args) { \n ______ name = "John"; \n ______ age = 24; \n _______ height = 189.87; \n  } \n } #String, int, double #true, int, class # String, boolean, double# char, boolean, int#
c#Basics#Math Operators	#1#The Math Operators \n \n Java provides a rich set of operators to use in manipulating variables. A value used on either side of an operator is called an operand. \n For example, in the expression below, the numbers 6 and 3 are operands of the plus operator: \n int x = 6 + 3; \n \n Java arithmetic operators: \n + addition \n - subtraction \n * multiplication \n / division \n % modulo \n Arithmetic operators are used in mathematical expressions in the same way that they are used in algebraic equations.#
q#Basics#Math Operators	#2#		#MC	#Declare an integer variable and set its value to 5. \n \n ____ var = ___ ;# int, 5 # Int, 5 # Integer, 5 # integer, 5#
c#Basics#Math Operators	#3#Addition \n \n The + operator adds together two values, such as two constants, a constant and a variable, or a variable and a variable. Here are a few examples of addition: \n int sum1 = 50 + 10; \n int sum2 = sum1 + 66; \n int sum3 = sum2 + sum2; \n \n Subtraction \n The - operator subtracts one value from another. \n int sum1 = 1000 - 10; \n int sum2 = sum1 - 5; \n int sum3 = sum1 - sum2; \n \n Just like in algebra, you can use both of the operations in a single line. For example: int val = 10 + 5 - 2;#
q#Basics#Math Operators	#2#		#MC	#Print the sum of the two variables. \n int x = 2; int y = 4; \n int result = x ____; \n System.out.println(_____);# + y, result # add y, sum # + y, sum(x,y)# + 4, result#
c#Basics#Math Operators	#3#Multiplication /n /n The * operator multiplies two values. \n int sum1 = 1000 * 2; \n int sum2 = sum1 * 10; \n int sum3 = sum1 * sum2; \n \n Division \n The / operator divides one value by another. \n int sum1 = 1000 / 5; \n int sum2 = sum1 / 2; \n int sum3 = sum1 / sum2; \n \n In the example above, the result of the division equation will be a whole number, as int is used as the data type. You can use double to retrieve a value with a decimal point.#
q#Basics#Math Operators	#2#		#MC	#What is the result of the following code? /n int x = 15; int y = 4; \n int result = x / y; \n System.out.println(result);# 3 # 3.75 # 4 # 3.0#
c#Basics#Math Operators	#3#Modulo \n \n The modulo (or remainder) math operation performs an integer division of one value by another, and returns the remainder of that division. \n The operator for the modulo operation is the percentage (%) character. \n Example: \n int value = 23; \n int res = value % 6; // res is 5 \n Dividing 23 by 6 returns a quotient of 3, with a remainder of 5. Thus, the value of 5 is assigned to the res variable.#
q#Basics#Math Operators	#2#		#MC	#What value is stored in the result variable? \n int x = 8, y = 5; \n int result = x % y;# 3 # 1 # 1.6 # 1.0#
c#Basics#Increment & Decrement# 1#Increment Operators \n \n An increment or decrement operator provides a more convenient and compact way to increase or decrease the value of a variable by one. \n For example, the statement x=x+1; can be simplified to ++x; \n Example: \n int test = 5; \n ++test; // test is now 6 \n \n The decrement operator (--) is used to decrease the value of a variable by one. \n int test = 5; \n --test; // test is now 4 \n \n Use this operator with caution to avoid calculation mistakes.#
q#Basics#Increment & Decrement#	2#	#MC	#Print 11. \n \n int a = 10; \n __a; \n System.out.println(a);#++# + # - # --#
c#Basics#Increment & Decrement# 3#Prefix & Postfix \n \n Two forms, prefix and postfix, may be used with both the increment and decrement operators. \n With prefix form, the operator appears before the operand, while in postfix form, the operator appears after the operand. Below is an explanation of how the two forms work: \n Prefix: Increments the variable's value and uses the new value in the expression. \n \n Example: \n int x = 34; \n int y = ++x; // y is 35 \n The value of x is first incremented to 35, and is then assigned to y, so the values of both x and y are now 35. \n Postfix: The variable's value is first used in the expression and is then increased. \n Example: \n int x = 34; \n int y = x++; // y is 34 \n x is first assigned to y, and is then incremented by one. Therefore, x becomes 35, while y is assigned the value of 34.\n The same applies to the decrement operator.#
q#Basics#Increment & Decrement# 4#		#MC	#Why does the following code output 14? \n int x = 14;\n System.out.println(x++)# all of theses# x++ uses and then increments the variable.#++a increments and then uses the variable.#The x value is first printed out and then it will be increased by one#
c#Basics#Increment & Decrement# 5#Assignment Operators \n \n You are already familiar with the assignment operator (=), which assigns a value to a variable. \n int value = 5; \n \n This assigned the value 5 to a variable called value of type int. \n \n Java provides a number of assignment operators to make it easier to write code. \n Addition and assignment (+=): \n int num1 = 4; \n int num2 = 8; \n num2 += num1; // num2 = num2 + num1; \n \n // num2 is 12 and num1 is 4 \n \n Subtraction and assignment (-=): \n int num1 = 4; \n int num2 = 8; \n num2 -= num1; // num2 = num2 - num1; \n \n // num2 is 4 and num1 is 4 \n  \n Similarly, Java supports multiplication and assignment (*=), division and assignment (/=), and remainder and assignment (%=).#
q#Basics#Increment & Decrement# 6#		#MC	#Which selection will print 13? \n int x = 25; int y; \n y = ___ - 12; \n System.out.println(___);# x, y # 25, x# x, 12# why, ex#
c#Basics#Strings #1#Strings \n \n A String is an object that represents a sequence of characters. \n For example, "Hello" is a string of 5 characters. \n \n For example: \n String q = "Go Quakers!!!"; \n \n You are allowed to define an empty string. For example, String str = "";#
q#Basics#Strings #2#		#MC	#Select from the options below to print "Hello". \n ______ var; \n var = "Hello"; \n System.out.println(___);# String, var #string, Var# String, hello# var, "Hello"#
c#Basics#Strings #3#String Concatenation \n \n The + (plus) operator between strings adds them together to make a new string. This process is called concatenation. \n The resulted string is the first string put together with the second string. \n For example: \n String firstName, lastName; \n firstName = "Nadia"; \n lastName = "Mikita"; \n \n System.out.println("My name is " + firstName +" "+lastName); \n  \n // Prints: My name is Nadia Mikita \n The char data type represents a single character.#
q#Basics#Strings #4#		#MC	#Which statement in regard to the char data type is true?# 'k' is a char# char is used to store numeric values # "hello" is a char # char is a fire type starter javamon#
c#Basics#Getting Input #1#Getting User Input \n \n While Java provides many different methods for getting user input, the Scanner object is the most common, and perhaps the easiest to implement. Import the Scanner class to use the Scanner object, as seen here: \n import java.util.Scanner; \n \n In order to use the Scanner class, create an instance of the class by using the following syntax: \n Scanner myVar = new Scanner(System.in); \n \n You can now read in different kinds of input data that the user enters. \n Here are some methods that are available through the Scanner class: \n Read a byte - nextByte() \n Read a short - nextShort() \n Read an int - nextInt() \n Read a long - nextLong() \n Read a float - nextFloat() \n Read a double - nextDouble() \n Read a boolean - nextBoolean() \n Read a complete line - nextLine() \n Read a word - next() #
c#Basics#Getting Input #2# Example of a program used to get user input: \n import java.util.Scanner; \n \n class MyClass { \n  public static void main(String[ ] args) { \n    Scanner myVar = new Scanner(System.in); \n    System.out.println(myVar.nextLine());    \n  } \n } \n \n This will wait for the user to input something and print that input. \n The code might seem complex, but you will understand it all in the upcoming lessons. #
q#Basics#Getting Input #3#		#MC	#Select from the options below to get user input. \n import java.util.Scanner; \n class test { \n   public static void main(String[ ] args) { \n      \n __________sc = new Scanner(System.in); \n String st = sc.________(); \n   } \n}# Scanner, nextline# scanner, input# input, nextGet# Scanner, getNext#
Q#Basics#Basics Quiz# 1 #		#MC	#Select code to declare two variables of type int and print their sum using the sum variable. \n int x = 4; \n ___y = 7; \n int sum = x __ y; \n System.out.println(_____); #int, +, sum # int, ++, sum # int, +, Sum# Int, +, "x+y"#
Q#Basics#Basics Quiz# 2 #		#MC	#In every Java program.... #...there must be a method called "main".# ...there must be at least one variable declared.# ...all of the variables must be all lower case# methods must be commented using javadocs#
Q#Basics#Basics Quiz# 3 #		#MC	#Select from the options below to output the value of name \n \n ______ name; \n name = "Enianc"; \n ______.out.println(____); #String, System, name# string, system, name # Str, system, "Eniac"# str, System, "name"#










