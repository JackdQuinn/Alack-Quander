Type0  #Module1 #Lesson2#Page3#Content4 #QType 5#Question 6#Correct Answer7#Wrong Answer8#Wrong Answer9#Wrong Answer10#FIB1#FIB2FIB3#FIB4#FIB5#
c #Basics  	#intro 	#1    #Java is a general-purpose computer-programming language originally developed by James Gosling at Sun Microsystems and released in 1995.# #######
c #Basics  	#intro 	#1    #Java gained widespread popularity for being Platform Independent, which means that you only need to write the program once to be able to run it on a number of different platforms!########
c #Basics  	#intro 	#1    #Today java is one of the most popular languages in the world with over 9 million developers########
q #Basics  	#intro 	#2    #        	#MC     #To distribute your application to different platforms, how many Java versions do you need to create?#Just one version#Two versions#One for each platform#42##
c #Basics  	#intro  #3    #Java runs on more than 3 billion devices.  Java is used to develop apps for Google's Android OS, various Desktop Applications, Web Applications, Enterprise Applications (i.e. trading, inventory), and many more!########
c #Basics  	#intro  #3    #Learn, practice, and then join the huge community of developers around the world creating the content of the future!########
q #Basics  	#intro  #4    #        	#MC     #"Which one of the following statements is true?"#Java has a huge developer community#Java is used only in web and mobile applications#Java is used only in NASA's space related applications#Java was developed by Starbuck's for their web development needs######
c#Basics#Hello World#1#Your First Java Program, Let's start by creating a simple program printing “Hello World” to the screen.#
c#Basics#Hello World#1#Hello World was the first message displayed by the Macintosh personal computer in 1984 and is the traditional first program written when learning to code.#
c#Basics#Hello World#1# class Java101 {public static void main(String[ ] args) {System.out.println("Hello World");}}#
c#Basics#Hello World#1#In Java, every line of code that will run needs to be inside a class. In our example, we named the class Java101. You will learn more about classes in the upcoming modules.#
c#Basics#Hello World#1#In Java, each application has an entry point, or a starting point, which is a method called main. Along with main, the keywords public and static will also be explained later. 
c#Basics#Hello World#1#As a summary:(1) Every program in Java must have a class. (2)Every Java program starts from the main method.
q#Basics#Hello World#2#			#MC	#Which method is the starting point for all Java programs?#main#start#run#panic#
c#Basics#Hello World#3#The main Method \n \n To run our program, the main method must be identical to this signature: \n public static void main(String[ ] args) \n \n \n \n - public: anyone can access it \n - static: method can be run without creating an instance of the class containing the main method \n - void: method doesn't return any value \n - main: the name of the method
c#Basics#Hello World#4#For example, the following code declares a method called test, which does not return anything and has no parameters: \n void test() \n \n The method's parameters are declared inside the parentheses that follow the name of the method. \n For main, it's an array of strings called args. We will use it in our next lesson, so don't worry if you don't understand it all now.
q#Basics#Hello World#5#			#MC	# Declare a method called "hello()". \n \n \n void ______ ()#hello#main.hello#Hello# static Hello#
c#Basics#Hello World#6#System.out.println() \n \n Next is the body of the main method, enclosed in curly braces: \n { \n   System.out.println("Hello World!"); \n } \n \n The println method prints a line of text to the screen. \n The System class and its out stream are used to access the println method. \n In classes, methods, and other flow-control structures code is always enclosed in curly braces { }. \n
q#Basics#Hello World#7#			#MC	#Which method prints text in a Java program?#System.out.println()#System.printText()#out.writeText()#System.out()#
c#Basics#Hello World#8#Semicolons in Java \n \n You can pass a different text as the parameter to the println method to print it. \n class MyClass {\n  public static void main(String[ ] args) { \n   System.out.println("I am learning Java");\n } \n } \n \n In Java, each code statement must end with a semicolon. \n Remember: do not use semicolons after method and class declarations that follow with the body defined using the curly braces.
q#Basics#Hello World#9#			#MC	# Make a selection to create a valid Java program. \n \n  ______Apples { \n     public static void _______(String[ ]args) { \n    System.out.println("Hello, World!"); \n   } \n }# class, main# public, start# method, return# class, implements#
c#Basics#Java Comments#1#Comments \n \n The purpose of including comments in your code is to explain what the code is doing.\n Java supports both single and multi-line comments. All characters that appear within a comment are ignored by the Java compiler. \n \n A single-line comment starts with two forward slashes and continues until it reaches the end of the line. \n For example: \n // this is a single-line comment \n x = 5; // a single-line comment after code \n \n Adding comments as you write code is a good practice, because they provide clarification and understanding when you need to refer back to it, as well as for others who might need to read it. \n#
q#Basics#Java Comments#2#		#MC	#Single-line comments are created using:# // characters at the beginning of the line# ** characters at the beginning of the line # // characters at the end of the line # */ characters at the beginning of the line#
c#Basics#Java Comments#3#Multi-Line Comments \n \n Java also supports comments that span multiple lines. \n You start this type of comment with a forward slash followed by an asterisk, and end it with an asterisk followed by a forward slash. \n For example: \n /*  This is also a \n    comment spanning \n    multiple lines */ \n \n Note that Java does not support nested multi-line comments. \n However, you can nest single-line comments within multi-line comments. \n /* This is a single-line comment: \n \n    // a single-line comment \n \n */ \n \n Another name for a Multi-Line comment is a Block comment.#
q#Basics#Java Comments#4#		#MC	#Make this text a multi-line comment. \n \n __ some \n * comment text \n __ #open the comment with /* and close with */ # open the comment with */ and close with /* # open the comment with // and close with \\ # open the comment with "" and close with ' #   
c#Basics#Java Comments#5#Documentation Comments \n \n Documentation comments are special comments that have the appearance of multi-line comments, with the difference being that they generate external documentation of your source code. These begin with a forward slash followed by two asterisks, and end with an asterisk followed by a forward slash. \n For example: \n /** This is a documentation comment */ \n \n /** This is also a \n   documentation comment */ \n #
c#Basics#Java Comments#6#Javadoc is a tool which comes with JDK and it is used for generating Java code documentation in HTML format from Java source code which has required documentation in a predefined format.\n \n When a documentation comment begins with more than two asterisks, Javadoc assumes that you want to create a "box" around the comment in the source code. It simply ignores the extra asterisks. \n For example: \n /********************** \n \n This is the start of a method \n \n ***********************/ \n \n This will retain just the text "This is the start of a method" for the documentation.#
q#Basics#Java Comments#7#		#MC	#You can add a Java doc style comment by using: # /** and */ characters to wrap a comment.#// and */ characters to wrap a comment.#// characters in the beginning of the line. #/* and */ characters to wrap a comment.#
c#Basics#Variables	#1#Variables \n \n Variables store data for processing. \n A variable is given a name (or identifier), such as area, age, height, and the like. The name uniquely identifies each variable, assigning a value to the variable and retrieving the value stored.#
c#Basics#Variables	#2#Variables have types. Some examples: \n - int: for integers (whole numbers) such as 123 and -456 \n - double: for floating-point or real numbers with optional decimal points and fractional parts in fixed or scientific notations, such as 3.1416, -55.66. \n - String: for texts such as "Hello" or "Good Morning!". Text strings are enclosed within double quotes.#
c#Basics#Variables	#3#You can declare a variable of a type and assign it a value. Example: \n String name = "David"; \n \n This creates a variable called name of type String, and assigns it the value "David". \n It is important to note that a variable is associated with a type, and is only capable of storing values of that particular type. For example, an int variable can store integer values, such as 123; but it cannot store real numbers, such as 12.34, or texts, such as "Hello". #
q#Basics#Variables	#4#		#MC	#Which variable type would you use for a city name?# String # int # double # city#
c#Basics#Variables	#5#Declaring Variables \n \n Examples of variable declarations: \n class MyClass { \n public static void main(String[ ] args) { \n   String name ="David"; \n   int age = 42; \n   double score =15.9; \n   char group = 'Z'; \n  } \n } \n \n char stands for character and holds a single character. \n \n Another type is the Boolean type, which has only two possible values: true and false. \n This data type is used for simple flags that track true/false conditions. \n For example: \n boolean online = true; \n \n You can use a comma-separated list to declare more than one variable of the specified type. Example: int a = 42, b = 11; #
q#Basics#Variables	#6#		#MC	#Choose from the options below to have a valid Java program. \n class Apples { \n   public static void main(String[ ]args) { \n ______ name = "John"; \n ______ age = 24; \n _______ height = 189.87; \n  } \n } #String, int, double #true, int, class # String, boolean, double# char, boolean, int#
c#Basics#Math Operators	#1#The Math Operators \n \n Java provides a rich set of operators to use in manipulating variables. A value used on either side of an operator is called an operand. \n For example, in the expression below, the numbers 6 and 3 are operands of the plus operator: \n int x = 6 + 3; \n \n Java arithmetic operators: \n + addition \n - subtraction \n * multiplication \n / division \n % modulo \n Arithmetic operators are used in mathematical expressions in the same way that they are used in algebraic equations.#
q#Basics#Math Operators	#2#		#MC	#Declare an integer variable and set its value to 5. \n \n ____ var = ___ ;# int, 5 # Int, 5 # Integer, 5 # integer, 5#
c#Basics#Math Operators	#3#Addition \n \n The + operator adds together two values, such as two constants, a constant and a variable, or a variable and a variable. Here are a few examples of addition: \n int sum1 = 50 + 10; \n int sum2 = sum1 + 66; \n int sum3 = sum2 + sum2; \n \n Subtraction \n The - operator subtracts one value from another. \n int sum1 = 1000 - 10; \n int sum2 = sum1 - 5; \n int sum3 = sum1 - sum2; \n \n Just like in algebra, you can use both of the operations in a single line. For example: int val = 10 + 5 - 2;#
q#Basics#Math Operators	#2#		#MC	#Print the sum of the two variables. \n int x = 2; int y = 4; \n int result = x ____; \n System.out.println(_____);# + y, result # add y, sum # + y, sum(x,y)# + 4, result#
c#Basics#Math Operators	#3#Multiplication /n /n The * operator multiplies two values. \n int sum1 = 1000 * 2; \n int sum2 = sum1 * 10; \n int sum3 = sum1 * sum2; \n \n Division \n The / operator divides one value by another. \n int sum1 = 1000 / 5; \n int sum2 = sum1 / 2; \n int sum3 = sum1 / sum2; \n \n In the example above, the result of the division equation will be a whole number, as int is used as the data type. You can use double to retrieve a value with a decimal point.#
q#Basics#Math Operators	#2#		#MC	#What is the result of the following code? /n int x = 15; int y = 4; \n int result = x / y; \n System.out.println(result);# 3 # 3.75 # 4 # 3.0#
c#Basics#Math Operators	#3#Modulo \n \n The modulo (or remainder) math operation performs an integer division of one value by another, and returns the remainder of that division. \n The operator for the modulo operation is the percentage (%) character. \n Example: \n int value = 23; \n int res = value % 6; // res is 5 \n Dividing 23 by 6 returns a quotient of 3, with a remainder of 5. Thus, the value of 5 is assigned to the res variable.#
q#Basics#Math Operators	#2#		#MC	#What value is stored in the result variable? \n int x = 8, y = 5; \n int result = x % y;# 3 # 1 # 1.6 # 1.0#
c#Basics#Increment & Decrement# 1#Increment Operators \n \n An increment or decrement operator provides a more convenient and compact way to increase or decrease the value of a variable by one. \n For example, the statement x=x+1; can be simplified to ++x; \n Example: \n int test = 5; \n ++test; // test is now 6 \n \n The decrement operator (--) is used to decrease the value of a variable by one. \n int test = 5; \n --test; // test is now 4 \n \n Use this operator with caution to avoid calculation mistakes.#
q#Basics#Increment & Decrement#	2#	#MC	#Print 11. \n \n int a = 10; \n __a; \n System.out.println(a);#++# + # - # --#
c#Basics#Increment & Decrement# 3#Prefix & Postfix \n \n Two forms, prefix and postfix, may be used with both the increment and decrement operators. \n With prefix form, the operator appears before the operand, while in postfix form, the operator appears after the operand. Below is an explanation of how the two forms work: \n Prefix: Increments the variable's value and uses the new value in the expression. \n \n Example: \n int x = 34; \n int y = ++x; // y is 35 \n The value of x is first incremented to 35, and is then assigned to y, so the values of both x and y are now 35. \n Postfix: The variable's value is first used in the expression and is then increased. \n Example: \n int x = 34; \n int y = x++; // y is 34 \n x is first assigned to y, and is then incremented by one. Therefore, x becomes 35, while y is assigned the value of 34.\n The same applies to the decrement operator.#
q#Basics#Increment & Decrement# 4#		#MC	#Why does the following code output 14? \n int x = 14;\n System.out.println(x++)# all of theses# x++ uses and then increments the variable.#++a increments and then uses the variable.#The x value is first printed out and then it will be increased by one#
c#Basics#Increment & Decrement# 5#Assignment Operators \n \n You are already familiar with the assignment operator (=), which assigns a value to a variable. \n int value = 5; \n \n This assigned the value 5 to a variable called value of type int. \n \n Java provides a number of assignment operators to make it easier to write code. \n Addition and assignment (+=): \n int num1 = 4; \n int num2 = 8; \n num2 += num1; // num2 = num2 + num1; \n \n // num2 is 12 and num1 is 4 \n \n Subtraction and assignment (-=): \n int num1 = 4; \n int num2 = 8; \n num2 -= num1; // num2 = num2 - num1; \n \n // num2 is 4 and num1 is 4 \n  \n Similarly, Java supports multiplication and assignment (*=), division and assignment (/=), and remainder and assignment (%=).#
q#Basics#Increment & Decrement# 6#		#MC	#Which selection will print 13? \n int x = 25; int y; \n y = ___ - 12; \n System.out.println(___);# x, y # 25, x# x, 12# why, ex#
c#Basics#Strings #1#Strings \n \n A String is an object that represents a sequence of characters. \n For example, "Hello" is a string of 5 characters. \n \n For example: \n String q = "Go Quakers!!!"; \n \n You are allowed to define an empty string. For example, String str = "";#
q#Basics#Strings #2#		#MC	#Select from the options below to print "Hello". \n ______ var; \n var = "Hello"; \n System.out.println(___);# String, var #string, Var# String, hello# var, "Hello"#
c#Basics#Strings #3#String Concatenation \n \n The + (plus) operator between strings adds them together to make a new string. This process is called concatenation. \n The resulted string is the first string put together with the second string. \n For example: \n String firstName, lastName; \n firstName = "Nadia"; \n lastName = "Mikita"; \n \n System.out.println("My name is " + firstName +" "+lastName); \n  \n // Prints: My name is Nadia Mikita \n The char data type represents a single character.#
q#Basics#Strings #4#		#MC	#Which statement in regard to the char data type is true?# 'k' is a char# char is used to store numeric values # "hello" is a char # char is a fire type starter javamon#
c#Basics#Getting Input #1#Getting User Input \n \n While Java provides many different methods for getting user input, the Scanner object is the most common, and perhaps the easiest to implement. Import the Scanner class to use the Scanner object, as seen here: \n import java.util.Scanner; \n \n In order to use the Scanner class, create an instance of the class by using the following syntax: \n Scanner myVar = new Scanner(System.in); \n \n You can now read in different kinds of input data that the user enters. \n Here are some methods that are available through the Scanner class: \n Read a byte - nextByte() \n Read a short - nextShort() \n Read an int - nextInt() \n Read a long - nextLong() \n Read a float - nextFloat() \n Read a double - nextDouble() \n Read a boolean - nextBoolean() \n Read a complete line - nextLine() \n Read a word - next() #
c#Basics#Getting Input #2# Example of a program used to get user input: \n import java.util.Scanner; \n \n class MyClass { \n  public static void main(String[ ] args) { \n    Scanner myVar = new Scanner(System.in); \n    System.out.println(myVar.nextLine());    \n  } \n } \n \n This will wait for the user to input something and print that input. \n The code might seem complex, but you will understand it all in the upcoming lessons. #
q#Basics#Getting Input #3#		#MC	#Select from the options below to get user input. \n import java.util.Scanner; \n class test { \n   public static void main(String[ ] args) { \n      \n __________sc = new Scanner(System.in); \n String st = sc.________(); \n   } \n}# Scanner, nextline# scanner, input# input, nextGet# Scanner, getNext#
Q#Basics#Basics Quiz# 1 #		#MC	#Select code to declare two variables of type int and print their sum using the sum variable. \n int x = 4; \n ___y = 7; \n int sum = x __ y; \n System.out.println(_____); #int, +, sum # int, ++, sum # int, +, Sum# Int, +, "x+y"#
Q#Basics#Basics Quiz# 2 #		#MC	#In every Java program.... #...there must be a method called "main".# ...there must be at least one variable declared.# ...all of the variables must be all lower case# methods must be commented using javadocs#
Q#Basics#Basics Quiz# 3 #		#MC	#Select from the options below to output the value of name \n \n ______ name; \n name = "Enianc"; \n ______.out.println(____); #String, System, name# string, system, name # Str, system, "Eniac"# str, System, "name"#
c#Conditions & Loops#Conditional Statements#2#Decision Making\n\nConditional statements are used to perform different actions based on different conditions. \nThe if statement is one of the most frequently used conditional statements.\nIf the if statement's condition expression evaluates to true, the block of code inside the if statement is executed. If the expression is found to be false, the first set of code after the end of the if statement (after the closing curly brace) is executed.\nSyntax:\nif (condition) {\n  //Executes when the condition is true\n}\n\nAny of the following comparison operators may be used to form the condition:\n< less than\n> greater than\n!= not equal to\n== equal to\n<= less than or equal to\n>= greater than or equal to\n\nFor example:\nint x = 7;\nif(x < 42) {\n  System.out.println("Hi");\n}\nRemember that you need to use two equal signs (==) to test for equality, since a single equal sign is the assignment operator.\n#
q#Conditions & Loops#Conditional Statements#2#	#FIB	#Fill in the blanks to print "Yeah".\nint x = 5;\n ___ ( x == 5 ) {\n   System.___.println("Yeah");\n}\n# if, out # # # #
c#Conditions & Loops#Conditional Statements#2#if...else Statements\n\nAn if statement can be followed by an optional else statement, which executes when the condition evaluates to false. \nFor example:\nint age = 30;\n\nif (age < 16) {\n  System.out.println("Too Young");\n} else {\n  System.out.println("Welcome!");\n}\n//Outputs "Welcome!"\nAs age equals 30, the condition in the if statement evaluates to false and the else statement is executed.\n#
q#Conditions & Loops#Conditional Statements#2#	#FIB	#Fill in the blanks to print the greater number.\n \n int x = 10;  int y = 5;\n \n ______ ( x > y ) {\n  System.out.println(_____);\n} \n _____ {\n  System.out.println(y);\n}\n # if, x, else# # # #
c#Conditions & Loops#Nested if Statements#2#Nested if Statements\n\nYou can use one if-else statement inside another if or else statement.\nFor example:\nint age = 25;\nif(age > 0) {\n  if(age > 16) {\n     System.out.println("Welcome!");\n  } else {\n     System.out.println("Too Young");\n  }\n} else {\n  System.out.println("Error");\n}\n//Outputs "Welcome!"\nYou can nest as many if-else statements as you want.\n#
q#Conditions & Loops#Nested if Statements#2#	#FIB	#Please fill in the missing parts of the nested if statement to print "it works!" to the screen.\n \nint x = 37;\nif (x > 22) {\n ____ (x > 31) {\n System. _____ .println("it works!");\n }\n}\n #if, out # # # #
c#Conditions & Loops#else if Statements#2#else if Statements\n\nInstead of using nested if-else statements, you can use the else if statement to check multiple conditions.\nFor example:\nint age = 25;\nif(age <= 0) {\n  System.out.println("Error");\n} else if(age <= 16) {\n  System.out.println("Too Young");\n} else if(age < 100) {\n  System.out.println("Welcome!");\n} else {\n  System.out.println("Really?");\n}\n//Outputs "Welcome!"\nThe code will check the condition to evaluate to true and execute the statements inside that block.\nYou can include as many else if statements as you need.\n#
q#Conditions & Loops#else if Statements#2#	#MC#An if statement can contain how many else if statements?\n#As many as you want #Only two #None# one#\n\n
c#Conditions & Loops#Logical Operators#2 #Logical Operators\n\nLogical operators are used to combine multiple conditions.\n\nLet's say you wanted your program to output "Welcome!" only when the variable age is greater than 18 and the variable money is greater than 500. \nOne way to accomplish this is to use nested if statements:\nif (age > 18) {\n  if (money > 500) {\n     System.out.println("Welcome!");\n  }\n}\n\nHowever, using the AND logical operator (&&) is a better way:\nif (age > 18 && money > 500) {\n  System.out.println("Welcome!");\n}\n\nIf both operands of the AND operator are true, then the condition becomes true.\n#
q#Conditions & Loops#Logical Operators#2 #	#FIB	#Fill in the blank to test both conditions in the following if statement.\nint age = 23;\nint money = 4000;\nif (age > 21 _____ money > 500) {\n   System.out.println("Welcome");\n}\n	# && # # # #
c#Conditions & Loops#Logical Operators#2 #The OR Operator\n\nThe OR operator (||) checks if any one of the conditions is true. \nThe condition becomes true, if any one of the operands evaluates to true.\nFor example:\nint age = 25;\nint money = 100;\n\nif (age > 18 || money > 500) {\n  System.out.println("Welcome!");\n}\n//Outputs "Welcome!"\nThe code above will print "Welcome!" if age is greater than 18 or if money is greater than 500.\n\nThe NOT (!) logical operator is used to reverse the logical state of its operand. If a condition is true, the NOT logical operator will make it false.\nExample:\nint age = 25;\nif(!(age > 18)) {\n  System.out.println("Too Young");\n} else {\n  System.out.println("Welcome");\n}\n//Outputs "Welcome"\n!(age > 18) reads as "if age is NOT greater than 18".\n#
q#Conditions & Loops#Logical Operators#2 #	#FIB	#What is the output of the following code?\nint a = 11; int b = 12;\nint c = 40;\nif (a > 100 || b > 3) {\n System.out.println(a);\n} else {\n System.out.println(c);\n}\n\n______\n	# 11 # # # #
c#Conditions & Loops#The switch Statement#2 #The switch Statement\n\nA switch statement tests a variable for equality against a list of values. Each value is called a case, and the variable being switched on is checked for each case.\nSyntax:\nswitch (expression) {\n  case value1 :\n    //Statements\n    break; //optional\n  case value2 :\n    //Statements\n    break; //optional\n   //You can have any number of case statements.\n   default : //Optional\n      //Statements\n}\n\n- When the variable being switched on is equal to a case, the statements following that case will execute until a break statement is reached.\n- When a break statement is reached, the switch terminates, and the flow of control jumps to the next line after the switch statement.\n- Not every case needs to contain a break. If no break appears, the flow of control will fall through to subsequent cases until a break is reached.\n\nThe example below tests day against a set of values and prints a corresponding message.\nint day = 3;\n\nswitch(day) {\n case 1:\n   System.out.println("Monday");\n   break;\n case 2:\n   System.out.println("Tuesday");\n   break;\n case 3:\n   System.out.println("Wednesday");\n   break;\n}\n// Outputs "Wednesday"\nYou can have any number of case statements within a switch. Each case is followed by the comparison value and a colon.\n#
q#Conditions & Loops#The switch Statement#2 #	#FIB	#Fill in the blanks to test the variable's value using the switch statement.\nint x = 10;\n _______ (____) {\n  case 10:\n    System.out.println("A");\n    break;\n____  20:\n    System.out.println("B");\n    break; \n}\n # switch, x, case # # # #
c#Conditions & Loops#The switch Statement#2 #The default Statement\n\nA switch statement can have an optional default case. \nThe default case can be used for performing a task when none of the cases is matched.\n\nFor example:\nint day = 3;\n\nswitch(day) {\n case 6:\n   System.out.println("Saturday");\n   break;\n case 7:\n   System.out.println("Sunday");\n   break;\ndefault:\n   System.out.println("Weekday");\n}\n// Outputs "Weekday"\nNo break is needed in the default case, as it is always the last statement in the switch.\n#
q#Conditions & Loops#The switch Statement#2 #	#FIB	#What is the output of the following code?\n\nint a = 11; int b = 12; int c = 40;\nswitch (a) {\ncase 40:\n  System.out.println(b);\n  break;\ndefault:\n  System.out.println(c);\n}\n____\n# 40 # # # #
c#Conditions & Loops#while Loops#2 #while Loops\n\nA loop statement allows to repeatedly execute a statement or group of statements.\n\nA while loop statement repeatedly executes a target statement as long as a given condition is true.\n\nExample:\nint x = 3;\n\nwhile(x > 0) {\n   System.out.println(x);\n   x--;\n}\n/* \nOutputs\n  3\n  2\n  1\n*/\n\nThe while loops check for the condition x > 0. If it evaluates to true, it executes the statements within its body. Then it checks for the statement again and repeats.\n\nNotice the statement x--. This decrements x each time the loop runs, and makes the loop stop when x reaches 0. \nWithout the statement, the loop would run forever.\n\n#
q#Conditions & Loops#while Loops#2 	#	#MC	#Re-order the code to produce a valid finite loop which prints a text to the screen in the loop.\na) int x = 12;\nb) x++; }\nc) System.out.println("Java rocks!");\nd)while (x < 100) {\n\n# a, d, c, b #a, b, c, d #c, a, b, d #d, b, c, a #
c#Conditions & Loops#while Loops#2 #while Loops\n\nWhen the expression is tested and the result is false, the loop body is skipped and the first statement after the while loop is executed.\n\nExample:\nint x = 6;\n\nwhile( x < 10 )\n{\n System.out.println(x);\n x++;\n}\nSystem.out.println("Loop ended");\n\n/*\n6\n7\n8\n9\nLoop ended\n*/\nNotice that the last print method is out of the while scope.\n#
q#Conditions & Loops#while Loops#2 	#	#MC	#How many times will the following loop work?\nint x = 0;\nint y = 5;\nwhile (x < y) {\n System.out.println("Hello");\n x++;	\n}\n\n#5 #4 #0 #3#
c#Conditions & Loops#for Loops#2 #for Loops\n\nAnother loop structure is the for loop. A for loop allows you to efficiently write a loop that needs to execute a specific number of times.\nSyntax:\nfor (initialization; condition; increment/decrement) {\n  statement(s)\n}\n\nInitialization: Expression executes only once during the beginning of loop\nCondition: Is evaluated each time the loop iterates. The loop executes the statement repeatedly, until this condition returns false.\nIncrement/Decrement: Executes after each iteration of the loop.\n\nThe following example prints the numbers 1 through 5.\nfor(int x = 1; x <=5; x++) {\n System.out.println(x);\n}\n\n/* Outputs\n1\n2\n3\n4\n5\n*/\nThis initializes x to the value 1, and repeatedly prints the value of x, until the condition x<=5 becomes false. On each iteration, the statement x++ is executed, incrementing x by one.\nNotice the semicolon (;) after initialization and condition in the syntax.\n#
q#Conditions & Loops#for Loops#2 	#	#FIB	#Fill in the blanks to print "Great!" 10 times:\n\n_____ (int i = 0; i < 10; ____) {\n System.out.println("______");\n}\n#for, i++, Great!####
c#Conditions & Loops#for Loops#2 #for Loops\n\nYou can have any type of condition and any type of increment statements in the for loop.\nThe example below prints only the even values between 0 and 10:\nfor(int x=0; x<=10; x=x+2) {\n System.out.println(x);\n}\n/*\n0\n2\n4\n6\n8\n10\n*/\nA for loop is best when the starting and ending numbers are known.\n#
q#Conditions & Loops#for Loops#2 	#	#MC	#How many times will the following loop run?\nfor (int i = 2; i < 10; i = i*i) {\n  System.out.println(i);\n}\n\n #2# 8# 10# 3#\n\n
c#Conditions & Loops#do... while Loops#2 #do...while Loops\n\nA do...while loop is similar to a while loop, except that a do...while loop is guaranteed to execute at least one time.\nExample:\nint x = 1;\ndo {\n System.out.println(x);\n x++;\n} while(x < 5);\n/*\n1\n2\n3\n4\n*/\nNotice that the condition appears at the end of the loop, so the statements in the loop execute once before it is tested.\nEven with a false condition, the code will run once. Example:\nint x = 1;\ndo {\n System.out.println(x);\n x++;\n} while(x < 0);\n//Outputs 1\nNotice that in do…while loops, the while is just the condition and doesn't have a body itself.\n#
q#Conditions & Loops#do... while Loops#2 #	#MC	#How is a do while loop different from a while loop?\n\n#A do while loop runs your code at least one time.#A while loop runs the code before testing the condition.#A do while loop tests the condition before running the code.# A do while loop executes the code and tests the condition simultaneously#
c#Conditions & Loops#do... while Loops#2 #Loop Control Statements\n\nThe break and continue statements change the loop's execution flow.\nThe break statement terminates the loop and transfers execution to the statement immediately following the loop.\nExample:\nint x = 1;\n\nwhile(x > 0) {\nSystem.out.println(x);\n if(x == 4) {\n   break;\n }\n x++;\n}\n\n/* Outputs\n1\n2\n3\n4\n*/\n\nThe continue statement causes the loop to skip the remainder of its body and then immediately retest its condition prior to reiterating. In other words, it makes the loop skip to its next iteration.\nExample:\nfor(int x=10; x<=40; x=x+10) {\n if(x == 30) {\n   continue;\n }\n System.out.println(x);\n}\n/* Outputs\n 10\n 20\n 40\n*/\n\nAs you can see, the above code skips the value of 30, as directed by the continue statement.\n#
q#Conditions & Loops#do... while Loops#2 #	#FIB	#Fill in the blanks to print the values of the x variable 5 times.\n\n int x = 1;\ndo {\n System.out.println(x);\n x++;\n} \n_____(x <= ____ );\n\n#while, 5 # # # #
q#Conditions & Loops#Quiz#2 #	#FIB	#Fill in the blanks to print "in a loop" 7 times, using the while loop.\n\n int x = 1;\nwhile (x <= _____\n) {\n  System.out.println("in a loop");\n_____++;\n}\n\n#7, x# # # #
q#Conditions & Loops#Quiz#2 #	#MC	#Please select the correct statements about && and || operators.\n\n1) a && b is true if either a or b is true\n2) a || b is true if either a or b is true\n3) (a || b ) && c is true if c is true and either a or b is true\n4) a && b is false if both a and b are true\n\n#2,3 #1,2#2,4#1,3#
q#Conditions & Loops#Quiz#2 #	#FIB	#Fill in the blanks to print "You rock!" if variable "a" is greater than 15, and variable "b" is less than or equal to 72.\nint a = 144;\nint b = 33;\nif (a > 15 _____b <= ______) {\n  System.out.println("You rock!");\n}\n#&&, 72# # # #
q#Conditions & Loops#Quiz#2 #	#FIB	#Fill in the blanks to print "in a loop" 5 times using the for loop.\n \n \n_____ (int x = 0; ____ < 5; x++) {\n  System.out.println("in a loop");\n}\n\n#for, x# # # #
c#Arrays	#Arrays#2 #Arrays\n\nAn array is a collection of variables of the same type. \nWhen you need to store a list of values, such as numbers, you can store them in an array, instead of declaring separate variables for each number.\n\nTo declare an array, you need to define the type of the elements with square brackets.\nFor example, to declare an array of integers:\nint[ ] arr;\n\nThe name of the array is arr. The type of elements it will hold is int.\n\nNow, you need to define the array's capacity, or the number of elements it will hold. To accomplish this, use the keyword new.\nint[ ] arr = new int[5];\n\nThe code above declares an array of 5 integers.\nIn an array, the elements are ordered and each has a specific and constant position, which is called an index.\n\nTo reference elements in an array, type the name of the array followed by the index position within a pair of square brackets.\nExample:\narr[2] = 42;\n\nThis assigns a value of 42 to the element with 2 as its index.\nNote that elements in the array are identified with zero-based index numbers, meaning that the first element's index is 0 rather than one. So, the maximum index of the arrayint[5] is 4.\n#
q#Arrays	#Arrays#2 #	#MC	#In Java, an array starts counting from...\n\n#0#1#2#3#
c#Arrays	#Arrays#2 #Initializing Arrays\n\nJava provides a shortcut for instantiating arrays of primitive types and strings. \nIf you already know what values to insert into the array, you can use an array literal. \nExample of an array literal:\nString[ ] myNames = { "A", "B", "C", "D"};\nSystem.out.println(myNames[2]);\n// Outputs "C"\n\nPlace the values in a comma-separated list, enclosed in curly braces. \nThe code above automatically initializes an array containing 4 elements, and stores the provided values.\nSometimes you might see the square brackets placed after the array name, which also works, but the preferred way is to place the brackets after the array's data type.\n#
q#Arrays	#Arrays#2 #	#FIB	#What is the output of this code?\n\nint tmp[ ] = {5, 8, 9, 3};\nSystem.out.println(tmp[2]);\n\n#9# # # #
c#Arrays#Length and Sum#2 #Array Length\n\nYou can access the length of an array (the number of elements it stores) via its length property. \nExample:\nint[ ] intArr = new int[5];\nSystem.out.println(intArr.length);\n\n//Outputs 5\nDon't forget that in arrays, indexes start from 0. So, in the example above, the last index is 4.\n#
q#Arrays#Length and Sum#2 #	#FIB	#Fill in the blanks to retrieve the number of elements in an array called "test".\n\ntest. _____\n#length# # # #
c#Arrays#Length and Sum#2 #Arrays\n\nNow that we know how to set and get array elements, we can calculate the sum of all elements in an array by using loops.\nThe for loop is the most used loop when working with arrays, as we can use the length of the array to determine how many times to run the loop.\nint [ ] myArr = {6, 42, 3, 7};\nint sum=0;\nfor(int x=0; x<myArr.length; x++) {\n  sum += myArr[x];\n}\nSystem.out.println(sum);\n\n// 58\nIn the code above, we declared a variable sum to store the result and assigned it 0.\nThen we used a for loop to iterate through the array, and added each element's value to the variable.\nThe condition of the for loop is x<myArr.length, as the last element's index is myArr.length-1.\n#
q#Arrays#Length and Sum#2 #	#FIB	#Fill in the blanks to calculate the sum of myArray's elements using the for loop, and print it to the screen. myArray is an array of doubles, containing 4 elements.\n\ndouble sum = 0.0;\nfor (int x = 0; x < 4; x____) {\n sum += myArray[x];\n}\nSystem.out.println(_____);\n\n#++, sum#  # # #
c#Arrays#Enhanced for Loop#2 #Enhanced for Loop\n\nThe enhanced for loop (sometimes called a "for each" loop) is used to traverse elements in arrays.\nThe advantages are that it eliminates the possibility of bugs and makes the code easier to read.\nExample:\nint[ ] primes = {2, 3, 5, 7};\n\nfor (int t: primes) {\n  System.out.println(t);\n}\n\n/*\n2\n3\n5\n7\n*/\n\n\nThe enhanced for loop declares a variable of a type compatible with the elements of the arraybeing accessed. The variable will be available within the for block, and its value will be the same as the current array element.\nSo, on each iteration of the loop, the variable t will be equal to the corresponding element in the array.\nNotice the colon after the variable in the syntax.\n#
q#Arrays#Enhanced for Loop#2 #	#FIB	#Fill in the blanks to use the enhanced for loop for an array called "arr":\n\n int total = 0;\nfor(int x__ _____) {\n   total += x;\n}\n\n#: , arr # # # #
c#Arrays#Multidimensional Arrays#2 #Multidimensional Arrays\n\nMultidimensional arrays are array that contain other arrays. The two-dimensional array is the most basic multidimensional array. \nTo create multidimensional arrays, place each array within its own set of square brackets. Example of a two-dimensional array:\nint[ ][ ] sample = { {1, 2, 3}, {4, 5, 6} };\n\nThis declares an array with two arrays as its elements.\nTo access an element in the two-dimensional array, provide two indexes, one for the array, and another for the element inside that array. \nThe following example accesses the first element in the second array of sample.\nint x = sample[1][0];\nSystem.out.println(x);\n\n// Outputs 4\n\nThe array's two indexes are called row index and column index.\n#
q#Arrays#Multidimensional Arrays#2 #	#MC	#What is the output of this code?\n\nString array[ ][ ] =  { {"Hey", "John", "Bye"},\n{"John", "Johnson", "Hello"} };\nSystem.out.println(array[1][1]);\n#Johnson#John#Hello#Hey#
c#Arrays#Multidimensional Arrays#2 #Multidimensional Arrays\n\nYou can get and set a multidimensional array's elements using the same pair of square brackets.\nExample:\nint[ ][ ] myArr = { {1, 2, 3}, {4}, {5, 6, 7} };\nmyArr[0][2] = 42;\nint x = myArr[1][0]; // 4\nThe above two-dimensional array contains three arrays. The first array has three elements, the second has a single element and the last of these has three elements. \nIn Java, you're not limited to just two-dimensional arrays. Arrays can be nested within arrays to as many levels as your program needs. All you need to declare an array with more than two dimensions, is to add as many sets of empty brackets as you need. However, these are harder to maintain.\nRemember, that all array members must be of the same type.\n#
q#Arrays#Multidimensional Arrays#2 #	#FIB	#What is the output of this code?\n\nint array[ ][ ] =  {{3, 5, 8}, {7, 54, 1, 12, 4}};\nSystem.out.println(array[0][2]);\n\n#8# # # #
q#Arrays#Quiz			#2 #	#FIB	#What is the output of this code?\n\nint arr[ ] = new int[3];\nfor (int i = 0; i < 3; i++) {\n  arr[i] = i;\n}\nint res = arr[0] + arr[2];\nSystem.out.println(res);\n \n#2# # # #
q#Arrays#Quiz			#2 #	#FIB	#What is the output of this code? \n\nint result = 0;\nfor (int i = 0; i < 5; i++) {\n if (i == 3) {\n    result += 10;\n  } else {\n    result += i;\n  }	\n}\nSystem.out.println(result);\n#17# # # #
q#Arrays#Quiz			#2 #	#FIB	#Fill in the blanks to calculate the sum of all elements in the array "arr" using an enhanced for loop:\n\nint res = 0;\n____ (int el __  arr) {\n  res += _____;\n}\n#for, :, el# # # #
c#Classes and Objects#OOPs#2 #Object-Oriented Programs\n\nJava uses Object-Oriented Programming (OOP), a programming style that is intended to make thinking about programming closer to thinking about the real world.\nIn OOP, each object is an independent unit with a unique identity, just as objects in the real world are.\nAn apple is an object; so is a mug. Each has its unique identity. It's possible to have two mugs that look identical, but they are still separate, unique objects.\n\nObjects also have characteristics, which are used to describe them. \nFor example, a car can be red or blue, a mug can be full or empty, and so on. These characteristics are also called attributes. An attribute describes the current state of an object.\nIn the real world, each object behaves in its own way. The car moves, the phone rings, and so on.\nThe same applies to objects: behavior is specific to the object's type.\nIn summary, in object oriented programming, each object has three dimensions: identity, attributes, and behavior. \nAttributes describe the object's current state, and what the object is capable of doing is demonstrated through the object's behavior.\n\nClasses\nA class describes what the object will be, but is separate from the object itself. \nIn other words, classes can be described as blueprints, descriptions, or definitions for an object. You can use the same class as a blueprint for creating multiple objects. The first step is to define the class, which then becomes a blueprint for object creation.\n\nEach class has a name, and each is used to define attributes (like name, height, weight, gender, age) and behaviors (like walking, running, coding, debugging, sleeping) .\nIn other words, an object is an instance of a class.\n#
q#Classes and Objects#OOPs#2 #	#MC	#A class defines... \n\n#attributes & behavior# values # behaviors# attributes#
c#Classes and Objects#Methods #2 #Methods\n\nMethods define behavior. A method is a collection of statements that are grouped together to perform an operation. System.out.println() is an example of a method. \nYou can define your own methods to perform your desired tasks. \nLet's consider the following code:\nclass MyClass {\n static void sayHello() {\n   System.out.println("Hello World!");\n }\n public static void main(String[ ] args) {\n   sayHello();\n }\n}\n// Outputs "Hello World!"\nThe code above declares a method called "sayHello", which prints a text, and then gets called in main.\nTo call a method, type its name and then follow the name with a set of parentheses.\n#
q#Classes and Objects#Methods #2 #	#FIB	#Fill in the blanks to call the method "hello" from main:\n\npublic static void main(String[ ] args) {\n_______ ;\n}\nstatic void hello() {\n   System.out.println("hi");\n}\n\n#hello()# # # #
c#Classes and Objects#Methods #2 #Calling Methods\n\nYou can call a method as many times as necessary. \nWhen a method runs, the code jumps down to where the method is defined, executes the code inside of it, then goes back and proceeds to the next line.\nExample:\nclass MyClass {\n\n static void sayHello() {\n   System.out.println("Hello World!");\n }\n\n public static void main(String[ ] args) {\n   sayHello();\n   sayHello();\n   sayHello();\n }\n}\n\n// Hello World!\n// Hello World!\n// Hello World!\nIn cases like the one above, where the same thing is repeated over and over, you can achieve the same result using loops (while or for).\n\n#
q#Classes and Objects#Methods #2 #	#MC	#How many times can you call a method?\n\n#as many as you want# only two# one # once per class#
c#Classes and Objects#Methods #2 #Method Parameters\n\nYou can also create a method that takes some data, called parameters, along with it when you call it. Write parameters within the method's parentheses.\nFor example, we can modify our sayHello() method to take and output a String parameter.\nclass MyClass {\n\n static void sayHello(String name) {\n   System.out.println("Hello " + name);\n }\n\n public static void main(String[ ] args) {\n   sayHello("David");\n   sayHello("Amy");\n }\n\n}\n// Hello David\n// Hello Amy\nThe method above takes a String called name as a parameter, which is used in the method's body. Then, when calling the method, we pass the parameter's value inside the parentheses.\nMethods can take multiple, comma-separated parameters.\nThe advantages of using methods instead of simple statements include the following:\n- code reuse: You can write a method once, and use it multiple times, without having to rewrite the code each time.\n- parameters: Based on the parameters passed in, methods can perform various actions.\n#
q#Classes and Objects#Methods #2 #	#MC	#What output results from this code?\n\n public static void main(String[ ] args) {\n  doSomething(4);\n}	\nstatic void doSomething(int x) {\n  System.out.println(x*x);\n}\n\n#16# 8# 4^2#42#
c#Classes and Objects#Return Type#2 #The Return Type\n\nThe return keyword can be used in methods to return a value.\nFor example, we could define a method named sum that returns the sum of its two parameters.\nstatic int sum(int val1, int val2) {\n  return val1 + val2;\n}\n\nNotice that in the method definition, we defined the return type before we defined the methodname. For our sum method, it is int, as it takes two parameters of the type int and returns their sum, which is also an int.\nThe static keyword will be discussed in a future lesson.\n\nNow, we can use the method in our main.\nclass MyClass {\nstatic int sum(int val1, int val2) {\n return val1 + val2;\n}\n   public static void main(String[ ] args) {\n   int x = sum(2, 5);\n   System.out.println(x);\n }\n}\n// Outputs "7"\nAs the method returns a value, we can assign it to a variable.\nWhen you do not need to return any value from your method, use the keyword void.\nNotice the void keyword in the definition of the main method - this means that main does not return anything.\n#
q#Classes and Objects#Return Type#2 #	#MC	#If you do not want your method to return anything, you should use the keyword:\n\n#void#null#static#public#
c#Classes and Objects#Return Type#2 #The Return Type\n\nTake a look at the same code from our previous lesson with explaining comments, so you can better understand how it works:\n// returns an int value 5\nstatic int returnFive() {\n return 5;\n}\n\n// has a parameter\nstatic void sayHelloTo(String name) {\n System.out.println("Hello " + name);\n}\n\n// simply prints"Hello World!"\nstatic void sayHello() {\n System.out.println("Hello World!");\n}\n\nHaving gained knowledge of method return types and parameters, let's take another look at the definition of the main method.\npublic static void main(String[ ] args)\n\nThis definition indicates that the main method takes an array of Strings as its parameters, and does not return a value.\n#
q#Classes and Objects#Return Type#2 #	#FIB	#Fill in the blanks to declare an integer, and pass it as a parameter to the test() method.\n\npublic static void main(String[ ] args) {\n____ x = 10;\ntest(_____);\n}\nstatic void test(int x) {   \n   System.out.println(x);\n}\n#int, x# # # #
c#Classes and Objects#Return Type#2 #The Return Type \n\nLet's create a method that takes two parameters of type int and returns the greater one, then call it in main:\npublic static void main(String[ ] args) {\n int res = max(7, 42);\n System.out.println(res); //42\n}\n\nstatic int max(int a, int b) {\n if(a > b) {\n   return a;\n }\n else {\n   return b;\n }\n}\nA method can have one type of parameter (or parameters) and return another, different type. For example, it can take two doubles and return an int.\n#
q#Classes and Objects#Return Type#2 #	#FIB	#What output results from this code?\n\npublic static void main(String[ ] args) {\n int x = 10;\n int y = myFunc(x);\n System.out.println(y);\n}\npublic static int myFunc(int x) {\n return x*3;\n}\n#30# # # #
c#Classes and Objects#Creating Classes and Objects#2 #Creating Classes\n\nIn order to create your own custom objects, you must first create the corresponding classes. This is accomplished by right clicking on the src folder in Eclipse and selecting Create->New->Class. Give your class a name and click Finish to add the new class to your project.  Eclipse will automatically add the initial code for the class. Ex:\n\npublic class Animal {\n\n}\n\n\nNow lets create a simple method in our new class.\nAnimal.java\npublic class Animal {\n void bark() {\n   System.out.println("Woof-Woof");\n }\n}\n\nWe declared a bark() method in our Animal class.\nNow, in order to use the class and it's methods, we need to declare an object of that class.\n#
q#Classes and Objects#Creating Classes and Objects#2 #	#FIB	#Fill in the blanks to create a class with a single method called "test".\npublic \n \n \n A {\n  public void \n \n \n() {\n    System.out.println(''Hi'');\n  }  \n}\n#class,test # # # #
c#Classes and Objects#Creating Classes and Objects#2 #Creating Objects\n\nLet's head over to our main and create a new object of our class.\nMyClass.java\nclass MyClass {\n public static void main(String[ ] args) {\n   Animal dog = new Animal();\n   dog.bark();\n }\n}\n// Outputs "Woof-Woof"\nNow, dog is an object of type Animal. Thus we can call its bark() method, using the name of the object and a dot.\nThe dot notation is used to access the object's attributes and methods.\nYou have just created your first object!\n#
q#Classes and Objects#Creating Classes and Objects#2 #	#FIB	#Fill in the blanks from the options below to create an object of the A class in the B class and call its "test" method.\n\npublic ______  A {\n  public void test() {\n    System.out.println("Hi");\n  }  \n}\nclass B {\n  public static void main(String args[ ]) {\n______ obj = ______ A();\nobj._______\n;\n  }\n}\n\n Word bank:  B object new create class test() A\n\n#class, A, new, test()# # # #
c#Classes and Objects#Creating Classes and Objects#2 #Defining Attributes\n\nA class has attributes and methods. The attributes are basically variables within a class.\nLet's create a class called Vehicle, with its corresponding attributes and methods.\npublic class Vehicle {\n int maxSpeed;\n int wheels;\n String color;\n double fuelCapacity; \n\n void horn() {\n   System.out.println("Beep!");\n } \n}\n\nmaxSpeed, wheels, color, and fuelCapacity are the attributes of our Vehicle class, and horn() is the only method.\nYou can define as many attributes and methods as necessary.\n#
q#Classes and Objects#Creating Classes and Objects#2 #	#FIB	#Fill in the blanks from the options below to define a class with these attributes: age of type integer, height as a double, and name as a string.\n\n _____ Person {\n  \n _____ age;\n  \n _____ height;\n  \n  _______ name;\n}\n\n Word bank: String define attribute void double class int\n\n #class, int, double, String# # # #
c#Classes and Objects#Creating Classes and Objects#2 #Creating Objects\n\nNext, we can create multiple objects of our Vehicle class, and use the dot syntax to access their attributes and methods.\nclass MyClass {\n public static void main(String[ ] args) {\n   Vehicle v1 = new Vehicle();\n   Vehicle v2 = new Vehicle();\n   v1.color = "red";\n   v2.horn();\n }\n}\n#
q#Classes and Objects#Creating Classes and Objects#2 #	#FIB	#Fill in the blanks to create two objects from the class "people".\npeople obj1 = _____  people();\n______ obj2 = new people ____ ;\n\n#new, people, ()# # # #
c#Classes and Objects#Access Modifiers #2 #Access Modifiers\n\nNow let's discuss the public keyword in front of the main method.\npublic static void main(String[ ] args)\n\npublic is an access modifier, meaning that it is used to set the level of access. You can use access modifiers for classes, attributes, and methods.\n\nFor classes, the available modifiers are public or default (left blank), as described below:\npublic: The class is accessible by any other class.\ndefault: The class is accessible only by classes in the same package.\n\nThe following choices are available for attributes and methods:\ndefault: A variable or method declared with no access control modifier is available to any other class in the same package.\npublic: Accessible from any other class.\nprotected: Provides the same access as the default access modifier, with the addition that subclasses can access protected methods and variables of the superclass (Subclasses and superclasses are covered in upcoming lessons).\nprivate: Accessible only within the declared class itself.\n\nExample:\npublic class Vehicle {\n private int maxSpeed;\n private int wheels;\n private String color;\n private double fuelCapacity;\n\n public void horn() {\n   System.out.println("Beep!");\n }\n}\n\nIt's a best practice to keep the variables within a class private. The variables are accessible and modified using Getters and Setters. \n#
q#Classes and Objects#Access Modifiers #2 #	#MC	#Which of the following is NOT a valid access modifier?\n\n #hidden# protected# public# private#
c#Classes and Objects#Getters & Setters#2 #Getters & Setters\n\nGetters and Setters are used to effectively protect your data, particularly when creating classes. For each variable, the get method returns its value, while the set method sets the value.\n\nGetters start with get, followed by the variable name, with the first letter of the variable name capitalized.\nSetters start with set, followed by the variable name, with the first letter of the variable name capitalized.\n\nExample:\npublic class Vehicle {\n private String color;\n\n // Getter\n public String getColor() {\n   return color;\n }\n\n// Setter\n public void setColor(String c) {\n   this.color = c;\n }\n}\n\nThe getter method returns the value of the attribute.\nThe setter method takes a parameter and assigns it to the attribute.\nThe keyword this is used to refer to the current object. Basically, this.color is the color attribute of the current object.\n#
q#Classes and Objects#Getters & Setters#2 #	#FIB	#Fill in the blanks from the options below to define the set and get methods.\nclass A {\n   private int x;   \n  public _____ getX() {\n  return _____ ;\n}\n  public _______  setX(int x) {\n    this.x = x;\n   }\n}\n\nWord Bank: void, x, String, int, double\n #int, x, void# # # #
c#Classes and Objects#Getters & Setters#2 #Getters & Setters\n\nOnce our getter and setter have been defined, we can use it in our main:\npublic static void main(String[ ] args) {\n Vehicle v1 = new Vehicle();\n v1.setColor("Red");\n System.out.println(v1.getColor());\n}\n\n//Outputs "Red"\nGetters and setters allow us to have control over the values. You may, for example, validate the given value in the setter before actually setting the value.\nGetters and setters are fundamental building blocks for encapsulation, which will be covered in the next module.\n#
q#Classes and Objects#Getters & Setters#2 #	#MC	#What would the name of the setter method for the class variable named "age" be?\n#setAge#Age#initAge#getAge#
c#Classes and Objects#Constructors 	#2 #Constructors\n\nConstructors are special methods invoked when an object is created and are used to initialize them. \nA constructor can be used to provide initial values for object attributes.\n\n- A constructor name must be same as its class name.\n- A constructor must have no explicit return type.\n\nExample of a constructor:\npublic class Vehicle {\n private String color;\n Vehicle() {\n    color = "Red";\n }\n}\n\nThe Vehicle() method is the constructor of our class, so whenever an object of that class is created, the color attribute will be set to "Red".\nA constructor can also take parameters to initialize attributes.\npublic class Vehicle {\n private String color;\n Vehicle(String c) {\n   color = c;\n }\n}\n\nYou can think of constructors as methods that will set up your class by default, so you don’t need to repeat the same code every time.\n#
q#Classes and Objects#Constructors 	#2 #		#FIB	#Create a valid constructor for the class below.\n\nclass Person {\n   private int age;\npublic ______ ( ______  myage) {\n      age = myage;\n   }\n}\n#Person, int# # # #
c#Classes and Objects#Constructors 	#2 #Using Constructors\n\nThe constructor is called when you create an object using the new keyword. \nExample:\npublic class MyClass {\n public static void main(String[ ] args) {\n   Vehicle v = new Vehicle("Blue");\n }\n}\n\nThis will call the constructor, which will set the color attribute to "Blue".\n#
q#Classes and Objects#Constructors 	#2 #		#MC	#To create an object of a class the constructor must be called using the _____ keyword.\n\n#new #init # add# void#
c#Classes and Objects#Constructors 	#2 #Constructors\n\nA single class can have multiple constructors with different numbers of parameters.\nThe setter methods inside the constructors can be used to set the attribute values.\n\nExample:\npublic class Vehicle {\n private String color;\n\n Vehicle() {\n   this.setColor("Red");\n }\n Vehicle(String c) {\n   this.setColor(c);\n }\n\n // Setter\n public void setColor(String c) {\n   this.color = c;\n }\n}\n\nThe class above has two constructors, one without any parameters setting the color attribute to a default value of "Red", and another constructor that accepts a parameter and assigns it to the attribute.\n\nNow, we can use the constructors to create objects of our class.\n//color will be "Red"\nVehicle v1 = new Vehicle();\n\n//color will be "Green"\nVehicle v2 = new Vehicle("Green");\nJava automatically provides a default constructor, so all classes have a constructor, whether one is specifically defined or not.\n#
q#Classes and Objects#Constructors 	#2 #		#FIB	#Fill in the blanks.\n \n \n ______ A\n{\n  private int x;\n   public A( ____  val) {\n     x = val;\n   }\n}\n#class, int# # # #
c#Classes and Objects#Value & Reference Types	#2 #Value Types\n\nValue types are the basic types, and include byte, short, int, long, float, double, boolean, and char.\nThese data types store the values assigned to them in the corresponding memory locations.\nSo, when you pass them to a method, you basically operate on the variable's value, rather than on the variable itself.\nExample:\npublic class MyClass {\n public static void main(String[ ] args) {\n   int x = 5;\n   addOneTo(x);\n   System.out.println(x);      \n }\n static void addOneTo(int num) {\n   num = num + 1;\n }\n}\n// Outputs "5"\nThe method from the example above takes the value of its parameter, which is why the original variable is not affected and 5 remains as its value.\n#
q#Classes and Objects#Value & Reference Types	#2 #		#MC	#What is the output of this code?\npublic static void main(String[ ] args) {\n  int x = 4;\n  square(x);\n  System.out.println(x);		\n}\nstatic void square(int x) {\n  x = x*x;\n}\n\n#4, parameter “x” does not return or update variable x.#16, the method square assigns the value of 16 to  parameter x#16, the method square assigns the value of 16 to  variable x# Bob Loblaw#
c#Classes and Objects#Value & Reference Types	#2 #Reference Types\n\nA reference type stores a reference (or address) to the memory location where the corresponding data is stored.\nWhen you create an object using the constructor, you create a reference variable.\nFor example, consider having a Person class defined:\npublic class MyClass {\n public static void main(String[ ] args) {\n   Person j;\n   j = new Person("John");\n   j.setAge(20);\n   celebrateBirthday(j);\n   System.out.println(j.getAge());\n }\n static void celebrateBirthday(Person p) {\n   p.setAge(p.getAge() + 1);\n }\n}\n//Outputs "21"\nThe method celebrateBirthday takes a Person object as its parameter, and increments its attribute. \nBecause j is a reference type, the method affects the object itself, and is able to change the actual value of its attribute.\nArrays and Strings are also reference data types.#
q#Classes and Objects#Value & Reference Types	#2 #		#FIB	#What is the output of this code?\npublic static void main(String[ ] args) {\n Person p = new Person();\n p.setAge(25);\n change(p);\n System.out.println(p.getAge());\n}\nstatic void change(Person p) {\n p.setAge(10);\n}\n\n#10#25#15#250#
c#Classes and Objects#The Math Class	#2 #The Math Class\n\nThe JDK defines a number of useful classes, one of them being the Math class, which provides predefined methods for mathematical operations.\nYou do not need to create an object of the Math class to use it. To access it, just type in Math.and the corresponding method.\n\nMath.abs() returns the absolute value of its parameter.\nint a = Math.abs(10);  // 10\nint b = Math.abs(-20); // 20\n \n\nMath.ceil() rounds a floating point value up to the nearest integer value. The rounded value is returned as a double.\ndouble c = Math.ceil(7.342);  // 8.0\n \n\nSimilarly, Math.floor() rounds a floating point value down to the nearest integer value.\ndouble f = Math.floor(7.343);  // 7.0\n \n\nMath.max() returns the largest of its parameters.\nint m = Math.max(10, 20);  // 20\n \nversely, Math.min() returns the smallest parameter.\nint m = Math.min(10, 20);  // 10\nMath.pow() takes two parameters and returns the first parameter raised to the power of the second parameter.\ndouble p = Math.pow(2, 3); // 8.0\n There are a number of other methods available in the Math class, including:\nsqrt() for square root, sin() for sine, cos() for cosine, and others\n#
q#Classes and Objects#The Math Class	#2 #	#MC	#What is the value of the following expression?\nMath.abs(Math.min(-6, 3));\n#-6# 6# 3# -3#
c#Classes and Objects#Static	#2 #Static\n\nWhen you declare a variable or a method as static, it belongs to the class, rather than to a specific instance. This means that only one instance of a static member exists, even if you create multiple objects of the class, or if you don't create any. It will be shared by all objects.\nExample:\npublic class Counter {\n public static int COUNT=0;\n Counter() {\n   COUNT++;\n }\n}\n\nThe COUNT variable will be shared by all objects of that class.\nNow, we can create objects of our Counter class in main, and access the static variable.\npublic class MyClass {\n public static void main(String[ ] args) {\n   Counter c1 = new Counter();\n   Counter c2 = new Counter();\n   System.out.println(Counter.COUNT);\n }\n}\n//Outputs "2"\nThe output is 2, because the COUNT variable is static and gets incremented by one each time a new object of the Counter class is created. In the code above, we created 2 objects.\nYou can also access the static variable using any object of that class, such as c1.COUNT.\nIt’s a common practice to use upper case when naming a static variable, although not mandatory.\n#
q#Classes and Objects#Static	#2 #		#FIB	#Fill in the blank to declare a static variable.\n\npublic _____ int x=0;\n#static# # # #
c#Classes and Objects#Static	#2 #Static\n\nThe same concept applies to static methods.\npublic class Vehicle {\n public static void horn() {\n   System.out.println("Beep");\n }\n}\n\nNow, the horn method can be called without creating an object:\npublic class MyClass {\n public static void main(String[ ] args) {\n   Vehicle.horn();\n }\n}\nAnother example of static methods are those of the Math class, which is why you can call them without creating a Math object.\nAlso, the main method must always be static.\n#
q#Classes and Objects#Static	#2 #		#MC	#What output results from this code?\n\nclass Person {\npublic static int pCount;	\npublic static void main(String[ ] args) {			\n  Person.pCount = 1;\n  Person.pCount++;\n  System.out.println(Person.pCount);		\n }\n}\n#1#2#3#4#
c#Classes and Objects#Final and Packages#2 #final\n\nUse the final keyword to mark a variable constant, so that it can be assigned only once.\nExample:\nclass MyClass {\n public static final double PI = 3.14;\n public static void main(String[ ] args) {\n   System.out.println(PI);\n }\n}\nPI is now a constant. Any attempt to assign it a value will cause an error.\nMethods and classes can also be marked final. This serves to restrict methods so that they can't be overridden and classes so that they can't be subclassed. \nThese concepts will be covered in the next module.\n#
q#Classes and Objects#Final and Packages#2 #		#MC	#What keyword makes a variable a constant?\n \n #final#static#immutable#protected#
c#Classes and Objects#Final and Packages#2 #Packages\n\nPackages are used to avoid name conflicts and to control access to classes.\nA package can be defined as a group made up of similar types of classes, along with sub-packages. \nCreating a package in Java is quite easy. Simply right click on your src directory and click New->Package. Give your package a name and click Finish. \nYou will notice that the new package appears in the project directory. Now you can move and create classes inside that package. \n\nWhen you move/create a class in your package, the following code will appear at the top of the list of files.\npackage samples;\n\nThis indicates the package to which the class belongs.\nNow, we need to import the classes that are inside a package in our main to be able to use them.\nThe following example shows how to use the Vehicle class of the samples package.\nimport samples.Vehicle;\n\nclass MyClass {\n public static void main(String[ ] args) {\n   Vehicle v1 = new Vehicle();\n   v1.horn();\n }\n}\n\nTwo major results occur when a class is placed in a package. First, the name of the packagebecomes a part of the name of the class. Second, the name of the package must match the directory structure where the corresponding class file resides.\nUse a wildcard to import all classes in a package.\nFor example, import samples.* will import all classes in the samples package.\n#
q#Classes and Objects#Final and Packages#2 #		#MC	#How many packages can be contained in a Java program?\n#as many as you need#none#one#42#
q#Classes and Objects#Quiz	#2 #		#FIB	#Fill in the blank to define a method that does not return a value.\n\npublic ____ calc()\n#void# # # #
q#Classes and Objects#Quiz	#2 #		#MC	#Which access modifier explicitly says that a method or variable of an object can be accessed by code from outside of the class of that object?\n\n#public#static#private#default#
q#Classes and Objects#Quiz	#2 #		#MC	#Re-order the code to declare a method returning the greater of the two arguments.\n\n 1)  public int max(int a, int b) {\n 2)  return b;\n 3)  if (a > b) {\n 4)  return a; }\n 5) }\n# 1,3, 4,2,5# 1,4,3,2,5 # 4,2,1,5,3# 1,3,4,5,2#
q#Classes and Objects#Quiz	#2 #		#FIB	#Fill in the blanks to declare a method that takes one argument of type int.\npublic int myFunc(___ x)___ \n\n   return x*10;\n___\n#int, {, }# # # #
q#Classes and Objects#Quiz	#2 #		#FIB	#Fill in the blanks to create a method that returns the minimum of the two parameters.\npublic int minFunc(int n1, int n2 ___ {\n   int min;\n   if (n1 > n2)\n      min = _____ ;\n   ____\n      min = n1;\n_____ min; \n}\n\n# ), n2, else, return #
q#Classes and Objects#Quiz	#2 #		#FIB	#Fill in the blanks to create a class with a method called "myFunc" that takes no parameters, returns void, and prints "Hi" to the screen.\n\n\npublic ____ myClass ___ \n    public ____  myFunc ___ {\n    System.out.println(''Hi'');\n   }\n}\n\n# class, { , void , () # # # #
c#Classes Part Deux  #Encapsulation#2 #Encapsulation\n\nThere are 4 core concepts in OOP: encapsulation, inheritance, polymorphism, and abstraction.\n\nThe idea behind encapsulation is to ensure that implementation details are not visible to users. The variables of one class will be hidden from the other classes, accessible only through the methods of the current class. This is called data hiding.\nTo achieve encapsulation in Java, declare the class' variables as private and provide public setterand getter methods to modify and view the variables' values.\n\nFor example:\nclass BankAccount {\n private double balance=0;\n public void deposit(double x) {\n   if(x > 0) {\n     balance += x;\n   }\n }\n}\n\nThis implementation hides the balance variable, enabling access to it only through the deposit method, which validates the amount to be deposited before modifying the variable.\nIn summary, encapsulation provides the following benefits:\n- Control of the way data is accessed or modified\n- More flexible and easily changed code\n- Ability to change one part of the code without affecting other parts\n#
q#Classes Part Deux  #Encapsulation#2 #		#FIB	#Fill in the blank from the options below to create a valid Java code with encapsulation.\npublic class Person {    \n____ int age;\n____ void setAge(_____ age) {\n     if (age > 0) {\n        this.age = age;\n      }\n   }\n}\n\nWord Bank: static, public, String, private, int, final \n\n#private, public, int # # # #
c#Classes Part Deux  #Inheritance#2 #Inheritance\n\nInheritance is the process that enables one class to acquire the properties (methods and variables) of another. With inheritance, the information is placed in a more manageable, hierarchical order.\n\nThe class inheriting the properties of another is the subclass (also called derived class, or child class); the class whose properties are inherited is the superclass (base class, or parent class).\n\nTo inherit from a class, use the extends keyword. \nThis example shows how to have the class Dog to inherit from the class Animal.\nclass Dog extends Animal {\n// some code\n}\n\nHere, Dog is the subclass, and Animal is the superclass.\n#
q#Classes Part Deux  #Inheritance#2 #		#FIB	#Fill in the blank to inherit the Car class from the Vehicle class.\n\nclass Car ______ Vehicle { }\n#extends# # # #
c#Classes Part Deux  #Inheritance#2 #Inheritance\n\nWhen one class is inherited from another class, it inherits all of the superclass' non-private variables and methods.\nExample:\nclass Animal {\n protected int legs;\n public void eat() {\n   System.out.println("Animal eats");\n }\n}\n\nclass Dog extends Animal {\n Dog() {\n   legs = 4;\n }\n}\n\nAs you can see, the Dog class inherits the legs variable from the Animal class.\nWe can now declare a Dog object and call the eat method of its superclass:\nclass MyClass {\n public static void main(String[ ] args) {\n   Dog d = new Dog();\n   d.eat();\n }\n}\nRecall the protected access modifier, which makes the members visible only to the subclasses.\n#
q#Classes Part Deux  #Inheritance#2 #		#FIB	#Fill in the blanks to inherit from the Animal class and call its method in main.\n\nclass Animal {\n   public void makeSound() {\n   System.out.println(''Hi'');\n   }\n}\n_____ Dog ______  Animal {\n}\nclass A {\n   public static void main(String args[ ]) {\n   Dog dog = new Dog();\n   ______ .makeSound();\n   }\n}\n\n#class, extends, dog# # # #
c#Classes Part Deux  #Inheritance#2 #Inheritance\n\nConstructors are not member methods, and so are not inherited by subclasses.\nHowever, the constructor of the superclass is called when the subclass is instantiated.\nExample:\nclass A {\n public A() {\n   System.out.println("New A");\n   }\n}\nclass B extends A {\n public B() {\n   System.out.println("New B");\n   }\n}\n\nclass Program {\n public static void main(String[ ] args) {\n     B obj = new B();\n }\n}\n/*Outputs\n"New A"\n"New B"\n*/\nYou can access the superclass from the subclass using the super keyword. \nFor example, super.var accesses the var member of the superclass.\n#
q#Classes Part Deux  #Inheritance#2 #		#MC	#Which methods are inherited from the super class.\n#non-private methods# only public# only protected# only private#
c#Classes Part Deux  #Polymorphism#2 #Polymorphism\n\nPolymorphism, which refers to the idea of "having many forms", occurs when there is a hierarchy of classes related to each other through inheritance. \nA call to a member method will cause a different implementation to be executed, depending on the type of the object invoking the method.\nHere is an example: Dog and Cat are classes that inherit from the Animal class. Each class has its own implementation of the makeSound() method.\nclass Animal {\n public void makeSound() {\n   System.out.println("Grr...");\n }\n}\nclass Cat extends Animal {\n public void makeSound() {\n   System.out.println("Meow");\n }\n}\nclass Dog extends Animal {\n public void makeSound() {\n   System.out.println("Woof");\n }\n}\n\nAs all Cat and Dog objects are Animal objects, we can do the following in main:\npublic static void main(String[ ] args) {\n Animal a = new Dog();\n Animal b = new Cat();\n}\n\nWe've created two reference variables of type Animal, and pointed them to the Cat and Dog objects.\nNow, we can call the makeSound() methods.\na.makeSound();\n//Outputs "Woof"\n\nb.makeSound();\n//Outputs "Meow"\nAs the reference variable a contains a Dog object, the makeSound() method of the Dog class will be called. \nThe same applies to the b variable.\nThis demonstrates that you can use the Animal variable without actually knowing that it contains an object of the subclass. \nThis is very useful when you have multiple subclasses of the superclass.\n#
q#Classes Part Deux  #Polymorphism#2 #		#MC	#Briefly, polymorphism is...\n\n#... one method, with different implementations#... one implementation, with different methods# ... each implementation, with a different method # the ever ongoing process of being and becoming#
c#Classes Part Deux  #Polymorphism#2 #Method Overriding\n\nAs we saw in the previous lesson, a subclass can define a behavior that's specific to the subclass type, meaning that a subclass can implement a parent class method based on its requirement.\nThis feature is known as method overriding.\nExample:\nclass Animal {\n   public void makeSound() {\n       System.out.println("Grr...");\n   }\n}\nclass Cat extends Animal {\n   public void makeSound() {\n       System.out.println("Meow");\n   }\n}\nIn the code above, the Cat class overrides the makeSound() method of its superclass Animal.\n\nRules for Method Overriding:\n- Should have the same return type and arguments\n- The access level cannot be more restrictive than the overridden method's access level (Example: If the superclass method is declared public, the overriding method in the sub class can be neither private nor protected)\n- A method declared final or static cannot be overridden\n- If a method cannot be inherited, it cannot be overridden\n- Constructors cannot be overridden\nMethod overriding is also known as runtime polymorphism.\n#
q#Classes Part Deux  #Polymorphism#2 #		#MC	#Overridden methods should have the same return type and arguments.\n#True # False# Contingent on implementation# Trulse#
c#Classes Part Deux  #Polymorphism#2 #Method Overloading\n\nWhen methods have the same name, but different parameters, it is known as method overloading.\nThis can be very useful when you need the same method functionality for different types of parameters.\nThe following example illustrates a method that returns the maximum of its two parameters.\nint max(int a, int b) {\n if(a > b) {\n   return a;\n }\n else {\n   return b;\n }\n}\n\nThe method shown above will only work for parameters of type integer.\nHowever, we might want to use it for doubles, as well. For that, you need to overload the max method:\ndouble max(double a, double b) {\n if(a > b) {\n   return a;\n }\n else {\n   return b;\n }\n}\nNow, our max method will also work with doubles.\nAn overloaded method must have a different argument list; the parameters should differ in their type, number, or both. \nAnother name for method overloading is compile-time polymorphism.\n#
q#Classes Part Deux  #Polymorphism#2 #		#MC	#What is the output of this code?\n\nclass A {\n  public void do() {\n    System.out.println(''A'');\n  }\n  public void do(String str) {\n    System.out.println(str);\n  }\n}\nclass B {\n  public static void main(String[ ] args) {\n  A object = new A();\n  object.do(''B'');\n  }\n}\n# B# Nothing# A# AB#
c#Classes Part Deux  #Abstract Classes #2 #Abstraction\n\nData abstraction provides the outside world with only essential information, in a process of representing essential features without including implementation details.\nA good real-world example is a book. When you hear the term book, you don't know the exact specifics, such as the page count, the color, or the size, but you understand the idea, or abstraction, of a book.\nThe concept of abstraction is that we focus on essential qualities, rather than the specific characteristics of one particular example.\n\nIn Java, abstraction is achieved using abstract classes and interfaces.\nAn abstract class is defined using the abstract keyword.\n- If a class is declared abstract it cannot be instantiated (you cannot create objects of that type).\n- To use an abstract class, you have to inherit it from another class.\n- Any class that contains an abstract method should be defined as abstract.\nAn abstract method is a method that is declared without an implementation (without braces, and followed by a semicolon): abstract void walk();\n#
q#Classes Part Deux  #Abstract Classes #2 #	#MC	#A class containing an abstract method is an abstract class.\n#True#False#depends on the implementation# Bob Loblaw#
c#Classes Part Deux  #Abstract Classes #2 #Abstract Class\n\nFor example, we can define our Animal class as abstract:\nabstract class Animal {\n int legs = 0;\n abstract void makeSound();\n}\n\nThe makeSound method is also abstract, as it has no implementation in the superclass.\nWe can inherit from the Animal class and define the makeSound() method for the subclass:\nclass Cat extends Animal {\n public void makeSound() {\n   System.out.println("Meow");\n }\n}\nEvery Animal makes a sound, but each has a different way to do it. That's why we define an abstract class Animal, and leave the implementation of how they make sounds to the subclasses. \nThis is used when there is no meaningful definition for the method in the superclass.\n#
q#Classes Part Deux  #Abstract Classes #2 #	#FIB	#Fill in the blanks to create an abstract class with an abstract method and inherit from it.\n\nabstract class Animal {\n  public int age;\n  public _____ int printAge();\n}\nclass Dog _______  Animal {\n  public ______ printAge() {\n    return age;\n  } \n}\n\n#abstract, extends, int # # # #
c#Classes Part Deux  #Interfaces #2 #Interfaces\n\nAn interface is a completely abstract class that contains only abstract methods.\nSome specifications for interfaces:\n- Defined using the interface keyword.\n- May contain only static final variables.\n- Cannot contain a constructor because interfaces cannot be instantiated.\n- Interfaces can extend other interfaces.\n- A class can implement any number of interfaces.\n\nAn example of a simple interface:\ninterface Animal {\n public void eat();\n public void makeSound();\n}\n\nInterfaces have the following properties:\n- An interface is implicitly abstract. You do not need to use the abstract keyword while declaring an interface.\n- Each method in an interface is also implicitly abstract, so the abstract keyword is not needed.\n- Methods in an interface are implicitly public.\nA class can inherit from just one superclass, but can implement multiple interfaces!\n#
q#Classes Part Deux  #Interfaces #2 #		#MC	#In Java, how many superclasses can your inherited subclass have?\n\n#only one # only two # none # multiple#
c#Classes Part Deux  #Interfaces #2 #Interfaces\n\nUse the implements keyword to use an interface with your class.\ninterface Animal {\n public void eat();\n public void makeSound();\n}\n\nclass Cat implements Animal {\n public void makeSound() {\n   System.out.println("Meow");\n }\n public void eat() {\n   System.out.println("omnomnom");\n }\n}\nWhen you implement an interface, you need to override all of its methods.\n#
q#Classes Part Deux  #Interfaces #2 #		#FIB	#Fill in the blanks from the options below to implement an interface.\n\ninterface Animal {\n   public void eat();\n}\n________ Cat implements ________  {\nPublic _______  eat() {\n      System.out.println("Cat eats");\n   }\n}\nWord Bank: void, class, Animal, Cat, return, abstract\n#class, Animal, void# # # #
c#Classes Part Deux  #Casting #2 #Type Casting\n\nAssigning a value of one type to a variable of another type is known as Type Casting.\n\nTo cast a value to a specific type, place the type in parentheses and position it in front of the value.\nExample:\nint a = (int) 3.14;\nSystem.out.println(a);\n//Outputs 3\nThe code above is casting the value 3.14 to an integer, with 3 as the resulting value.\nAnother example:\ndouble a = 42.571;\nint b = (int) a;\nSystem.out.println(b);\n//Outputs 42\nJava supports automatic type casting of integers to floating points, since there is no loss of precision.\nOn the other hand, type casting is mandatory when assigning floating point values to integer variables.\n#
q#Classes Part Deux  #Casting #2 #		#MC	#What is the output of this code?\n\npublic static void main(String[ ] args) {	\n double x = 1.5;\n double y = 2.65;\n sum((int)x, (int)y);\n}\nstatic void sum(int x, int y) {\n  System.out.println(x + y);\n}\n\n#3# 4 # 1 + 2 # 5#
c#Classes Part Deux  #Casting #2 #Type Casting\n\nFor classes, there are two types of casting.\n\nUpcasting\nYou can cast an instance of a subclass to its superclass.\nConsider the following example, assuming that Cat is a subclass of Animal.\nAnimal a = new Cat();\n\nJava automatically upcasted the Cat type variable to the Animal type.\n\nDowncasting\nCasting an object of a superclass to its subclass is called downcasting.\nExample:\nAnimal a = new Cat();\n((Cat)a).makeSound();\n\nThis will try to cast the variable a to the Cat type and call its makeSound() method.\nWhy is upcasting automatic, downcasting manual? Well, upcasting can never fail. But if you have a group of different Animals and want to downcast them all to a Cat, then there's a chance that some of these Animals are actually Dogs, so the process fails.\n#
q#Classes Part Deux  #Casting #2 #		#MC	#What is the output of this code?\nclass A {\n  public void print() {\n     System.out.println("A");\n  }\n}\nclass B extends A {\n  public void print() {\n     System.out.println("B");\n  }\n  public static void main(String[ ] args) {\n   A object = new B();\n   B b = (B) object;\n   b.print();\n  }\n}\n#B# A # “b” # nothing #
c#Classes Part Deux  #Anonymous Classes#2 #Anonymous Classes\n\nAnonymous classes are a way to extend the existing classes on the fly.\nFor example, consider having a class Machine:\nclass Machine {\n public void start() {\n   System.out.println("Starting...");\n }\n}\n\nWhen creating the Machine object, we can change the start method on the fly.\npublic static void main(String[ ] args) {\n Machine m = new Machine() {\n   @Override public void start() {\n     System.out.println("Wooooo");\n   }\n };\n m.start();\n}\n//Outputs "Wooooo";\nAfter the constructor call, we have opened the curly braces and have overridden the start method's implementation on the fly. \nThe @Override annotation is used to make your code easier to understand, because it makes it more obvious when methods are overridden.\n#
q#Classes Part Deux  #Anonymous Classes#	#FIB	#Fill in the blanks to override the start method of the Machine class.\n\nMachine m = _____  Machine() {\n___Override public void ____ () {\n      System.out.println("Hi");\n   }\n}\n\n#new, @, start # # # #
c#Classes Part Deux  #Anonymous Classes#2 #Anonymous Classes\n\nThe modification is applicable only to the current object, and not the class itself. So if we create another object of that class, the start method's implementation will be the one defined in the class.\nclass Machine {\n public void start() {\n   System.out.println("Starting...");\n }\n} \npublic static void main(String[ ] args) {\n Machine m1 = new Machine() {\n   @Override public void start() {\n     System.out.println("Wooooo");\n   }\n };\n Machine m2 = new Machine();\n m2.start();\n }\n//Outputs "Starting..."\nTry It Yourself by copying the code to eclipse\n#
q#Classes Part Deux  #Anonymous Classes#	#FIB	#Fill in the  blanks from the options below to print "...".\n\nclass Car {\n   public void print() {\n   System.out.println("vroom");\n   }  \n}\nclass ElectricCar {    \n   public static void main(String[ ] args) {     \n_______ object = ________  Car() {\n@Override public void _______( ) {\nSystem.out.println( ______ );\n       }\n    };\n    object.print();\n   }  \n}\nWord Bank: extends, new, "Hello", A, String, B, print, ...\n#Car, new, print, ... # # # #
c#Classes Part Deux  #Inner Classes#2 #Inner Classes\n\nJava supports nesting classes; a class can be a member of another class.\nCreating an inner class is quite simple. Just write a class within a class. Unlike a class, an inner class can be private. Once you declare an inner class private, it cannot be accessed from an object outside the class.\nExample:\nclass Robot {\n int id;\n Robot(int i) {\n   id = i;\n   Brain b = new Brain();\n   b.think();\n }\n\nprivate class Brain {\n   public void think() {\n     System.out.println(id + " is thinking");\n   }\n }\n\n}\nThe class Robot has an inner class Brain. The inner class can access all of the member variables and methods of its outer class, but it cannot be accessed from any outside class.\n#
q#Classes Part Deux  #Inner Classes#2 #		#FIB	#Fill in the blanks to have an inner class Hand, which has a method called "shake" that prints "Hi".\n\npublic class Person {\n  class ____ {\n  public void _____() {\n  _____.out.println("Hi");  }\n  }   }\n\n#Hand, shake, System# # # #
c#Classes Part Deux  #Comparing Objects #2 #Comparing Objects\n\nRemember that when you create objects, the variables store references to the objects.\nSo, when you compare objects using the equality testing operator (==), it actually compares the references and not the object values.\nExample:\nclass Animal {\n String name;\n Animal(String n) {\n   name = n;\n }\n}\n\nclass MyClass {\n public static void main(String[ ] args) {\n   Animal a1 = new Animal("Robby");\n   Animal a2 = new Animal("Robby");\n   System.out.println(a1 == a2);\n }\n}\n//Outputs false\nDespite having two objects with the same name, the equality testing returns false, because we have two different objects (two different references or memory locations).\n#
q#Classes Part Deux  #Comparing Objects #2 #	#MC	#What is the output of this code?\n\nclass A {\nprivate int x;	\npublic static void main(String[ ] args) {\n  A a = new A();\n  a.x = 5;\n  A b = new A();\n  b.x = 5;\n  System.out.println(a == b);			\n}\n}\n\n# false # undefined # true # error #
c#Classes Part Deux  #Comparing Objects #2 #equals()\n\nEach object has a predefined equals() method that is used for semantical equality testing.\nBut, to make it work for our classes, we need to override it and check the conditions we need.\nThere is a simple and fast way of generating the equals() method, other than writing it manually.\nJust right click in your class, go to Source->Generate hashCode() and equals()...\nThis will automatically create the necessary methods.\nclass Animal {\n String name;\n Animal(String n) {\n   name = n;\n }\n @Override\n public int hashCode() {\n   final int prime = 31;\n   int result = 1;\n   result = prime * result + ((name == null) ? 0 : name.hashCode());\n   return result;\n }\n @Override\n public boolean equals(Object obj) {\n   if (this == obj)\n     return true;\n   if (obj == null)\n     return false;\n   if (getClass() != obj.getClass())\n     return false;\n   Animal other = (Animal) obj;\n   if (name == null) {\n     if (other.name != null)\n       return false;\n   } else if (!name.equals(other.name))\n     return false;\n   return true;\n }\n}\n\nThe automatically generated hashCode() method is used to determine where to store the object internally. Whenever you implement equals, you MUST also implement hashCode.\nWe can run the test again, using the equals method:\npublic static void main(String[ ] args) {\n Animal a1 = new Animal("Robby");\n Animal a2 = new Animal("Robby");\n System.out.println(a1.equals(a2));\n}\n//Outputs true\nYou can use the same menu to generate other useful methods, such as getters and setters for your class attributes.\n#
q#Classes Part Deux  #Comparing Objects #2 #	#FIB	#Fill in the blanks from the options below to check whether the two objects of type A are semantically equal.\n\nclass A {\n   private int x;\n   public _____  equals(Object o) {\n  ______  ((A)o).x == this.x;\n   } \n   public static void main(String[ ] args)  {\n    A a = new A();\n    a.x = 9;\n   A b = new ______ ();\n    b.x = 5;\n    System.out.println(a. _____ (b));\n   }\n}\nWord Bank: boolean, b, return, equals, new, x, A\n# boolean, return, A, equals # # # #
c#Classes Part Deux  #Enums #2 #Enums\n\nAn Enum is a special type used to define collections of constants. \nHere is a simple Enum example:\nenum Rank {\n SOLDIER,\n SERGEANT,\n CAPTAIN\n}\n\nNote that the values are comma-separated.\nYou can refer to the constants in the enum above with the dot syntax.\nRank a = Rank.SOLDIER;\n\nBasically, Enums define variables that represent members of a fixed set.\n#
q#Classes Part Deux  #Enums #2 #	#MC	#Enums are used to declare variables that represent...\n# members of a fixed set # integers # classes # interfaces#
c#Classes Part Deux  #Enums #2 #Enums\n\nAfter declaring an Enum, we can check for the corresponding values with, for example, a switch statement.\nRank a = Rank.SOLDIER;\nswitch(a) {\n case SOLDIER:\n   System.out.println("Soldier says hi!");\n   break;\n case SERGEANT:\n   System.out.println("Sergeant says Hello!");\n break;\n case CAPTAIN:\n   System.out.println("Captain says Welcome!");\n   break;\n}\n//Outputs "Soldier says hi!"\n#
q#Classes Part Deux  #Enums #2 #	#FIB	#Fill in the blanks to create an Enum called "Color", with the values RED, BLUE, GREEN.\n\n\npublic ______  Color  {\n  RED, ______ , GREEN;\n}\n#enum, BLUE# # # #
c#Classes Part Deux  #Enums #2 #Enums\n\nYou should always use Enums when a variable (especially a method parameter) can only take one out of a small set of possible values.\nIf you use Enums instead of integers (or String codes), you increase compile-time checking and avoid errors from passing in invalid constants, and you document which values are legal to use.\nSome sample Enum uses include month names, days of the week, deck of cards, etc.\n#
q#Classes Part Deux  #Enums #2 #	#MC	#What is the output of this code?\nenum Color  {\n RED, BLUE, GREEN;\n}\nclass PrintColor {\n  public static void main(String[ ] args) {\n  Color color = Color.RED;\n  switch(color) {\n  case BLUE:\n    System.out.println("1");\n  break;\n  case GREEN:\n    System.out.println("2");\n  break;\n  default:\n    System.out.println("0");\n  break;		\n  }\n}\n}\n\n#0 # RED # 1 # GREEN#
c#Classes Part Deux  #The Java API #2 #Java API\n\nThe Java API is a collection of classes and interfaces that have been written for you to use.\nThe Java API Documentation with all of the available APIs can be located on the Oracle website at \nhttp://docs.oracle.com/javase/7/docs/api/\nOnce you locate the package you want to use, you need to import it into your code.\nThe package can be imported using the import keyword.\nFor example:\nimport java.awt.*;\n\nThe awt package contains all of the classes for creating user interfaces and for painting graphics and images.\nThe wildcard character (*) is used to import all of the classes in the package.\n#
q#Classes Part Deux  #The Java API #2 #	#FIB	#Fill in the blank to import all types in the package awt.\n \n \n ______ java.awt. ___; \n\n#import, *# # # #
q#Classes Part Deux  #Quiz 	   #2 #	#MC	#What is the output of this code?\nclass A {\n  private void print() {\n    System.out.println(''a'');\n  }\n  private void print(String str) {\n    System.out.println(''b'');\n  }\n  private void print(int x) {\n    System.out.println(''c'');\n  }		\n  public static void main(String[ ] args) {	\n    A object = new A();\n    object.print(12);	\n  }	\n}\n#c # b # a # 12#
q#Classes Part Deux  #Quiz 	   #2 #	#MC	#Define a new class Falcon, based on the superclass Bird.\n \n \n______ Falcon _______  Bird {\n }\n\n#class, extends # public, implements # Super, extends # @, Override#
q#Classes Part Deux  #Quiz 	   #2 #	#MC	#Object variables store...\n#References #Classes #Objects# Strings #
q#Classes Part Deux  #Quiz 	   #2 #	#MC	#What term is used for hiding the details of an object from the other parts of a program?\n#Encapsulation #Data Mining #Polymorphism #Inheritance#
q#Classes Part Deux  #Quiz 	   #2 #	#MC	#A class Car and its subclass BMW each have a method run(), which was written by the developer as part of the class definition. If CarObj refers to an object of type BMW, what will CarObj.run(); do?\n#The run() method defined in BMW will be called. #The compiler will complain that run() has been defined twice. #The run() method defined in Car will be called. #The run() method will be called and print “Vroom!”#
q#Classes Part Deux  #Quiz 	   #2 #	#MC	#Valentine, Holiday, and Birthday inherit from the class Card. In order for the following code to be correct, what type must the reference variable card be?\ncard = new Valentine( "A", 14 ) ;\ncard.greeting();\n\ncard = new Holiday( "B" ) ;\ncard.greeting();\n\ncard = new Birthday( "C", 12 ) ;\ncard.greeting();\n\n#Card# Valentine# Birthday# Holiday#
c#Exceptions, Lists, Threads, & Files#Exceptions#1 #Exceptions\n\nAn exception is a problem that occurs during program execution. Exceptions cause abnormal termination of the program. \nException handling is a powerful mechanism that handles runtime errors to maintain normal application flow.\n\nAn exception can occur for many different reasons. Some examples:\n- A user has entered invalid data.\n- A file that needs to be opened cannot be found.\n- A network connection has been lost in the middle of communications.\n- Insufficient memory and other issues related to physical resources.\nAs you can see, exceptions are caused by user error, programmer error, or physical resource issues. However, a well-written program should handle all possible exceptions.\n#
q#Exceptions, Lists, Threads, & Files#Exceptions#1 #	#MC	#Which of the following statements are true?\n\n#A) If we don't catch exceptions, the program can shut down#B) Exception catching is a good practice#C) Exception catching improves program interface design# D) A, B, and C#
c#Exceptions, Lists, Threads, & Files#Exceptions#1 #Exception Handling\n\nExceptions can be caught using a combination of the try and catch keywords.\nA try/catch block is placed around the code that might generate an exception. \nSyntax:\ntry {\n //some code\n} catch (Exception e) {\n //some code to handle errors\n}\n\nA catch statement involves declaring the type of exception you are trying to catch. If an exception occurs in the try block, the catch block that follows the try is checked. If the type of exception that occurred is listed in a catch block, the exception is passed to the catch block much as an argument is passed into a method parameter.\nThe Exception type can be used to catch all possible exceptions.\n\nThe example below demonstrates exception handling when trying to access an array index that does not exist:\npublic class MyClass {\n public static void main(String[ ] args) {\n   try {\n     int a[ ] = new int[2];\n     System.out.println(a[5]);\n   } catch (Exception e) {\n     System.out.println("An error occurred");\n   }\n }\n}\n//Outputs "An error occurred"\nWithout the try/catch block this code should crash the program, as a[5] does not exist.\nNotice the (Exception e) statement in the catch block - it is used to catch all possible Exceptions.\n#
q#Exceptions, Lists, Threads, & Files#Exceptions#1 #	#MC	#Handle any possible exceptions.\n\nint x = 12;\nint y = 0; \n \n _____ {\n   int z = x / y;\n   System.out.println(z);\n}\n \n ______ (Exception e) {\n   System.out.println("Error");\n}\n\n# try, catch # try, throws #attempt, accept # suckItUp, butterCup#
c#Exceptions, Lists, Threads, & Files#Exceptions#1 #throw\n\nThe throw keyword allows you to manually generate exceptions from your methods. Some of the numerous available exception types include the IndexOutOfBoundsException, IllegalArgumentException, ArithmeticException, and so on. \nFor example, we can throw an ArithmeticException in our method when the parameter is 0.\nint div(int a, int b) throws ArithmeticException {\n if(b == 0) {\n   throw new ArithmeticException("Division by Zero");\n } else {\n   return a / b;\n }\n}\nThe throws statement in the method definition defines the type of Exception(s) the method can throw. \nNext, the throw keyword throws the corresponding exception, along with a custom message.\nIf we call the div method with the second parameter equal to 0, it will throw an ArithmeticException with the message "Division by Zero".\nMultiple exceptions can be defined in the throws statement using a comma-separatedlist.\n#
q#Exceptions, Lists, Threads, & Files#Exceptions#1 #	#FIB	#Fill in the blanks from the options below to create a method that throws an IOException if the parameter is negative.\n\n\npublic void do(int x)\n_______   ______ {\n  if(x<0)\n  {\n______   _______ IOException();\n  }\n}\n\nWord Bank: IOException, new, throw, throws, while, Bob Loblaw\n#throws, IOException, throw, new # # # #
c#Exceptions, Lists, Threads, & Files#Exceptions#1 #Exception Handling\n\nA single try block can contain multiple catch blocks that handle different exceptions separately.\nExample:\ntry {\n //some code\n} catch (ExceptionType1 e1) {\n //Catch block\n} catch (ExceptionType2 e2) {\n //Catch block\n} catch (ExceptionType3 e3) {\n //Catch block\n}\n\nAll catch blocks should be ordered from most specific to most general. \nFollowing the specific exceptions, you can use the Exception type to handle all other exceptions as the last catch.\n
q#Exceptions, Lists, Threads, & Files#Exceptions#1 #	#MC	#How many catch blocks can a try/catch block contain?\n\n#As many as you need#Only one #None #Only two #
c#Exceptions, Lists, Threads, & Files#Threads 	#1 #Threads\n\nJava is a multi-threaded programming language. This means that our program can make optimal use of available resources by running two or more components concurrently, with each component handling a different task.\nYou can subdivide specific operations within a single application into individual threads that all run in parallel.\n\nThere are two ways to create a thread.\n1. Extend the Thread class\nInherit from the Thread class, override its run() method, and write the functionality of the thread in the run() method.\nThen you create a new object of your class and call it's start method to run the thread.\nExample:\nclass Loader extends Thread {\n public void run() {\n   System.out.println("Hello");\n }\n}\n\nclass MyClass {\n public static void main(String[ ] args) {\n   Loader obj = new Loader();\n   obj.start();\n }\n}\nAs you can see, our Loader class extends the Thread class and overrides its run() method.\nWhen we create the obj object and call its start() method, the run() method statements execute on a different thread.\nEvery Java thread is prioritized to help the operating system determine the order in which to schedule threads. The priorities range from 1 to 10, with each thread defaulting to priority 5. You can set the thread priority with the setPriority() method.\n#
q#Exceptions, Lists, Threads, & Files#Threads 	#1 #	#FIB	#Fill in the blanks to run the method in a separate thread.\nclass A __________ Thread {\n   public void ______ () {\n      System.out.println("Hello");\n   }\n   public static void main(String[ ] args) {\n   A object = new A();\n   object. ______ ();\n   }\n}\n#extends, run, start # # # #
c#Exceptions, Lists, Threads, & Files#Threads 	#1 #Threads\n\nThe other way of creating Threads is implementing the Runnable interface.\nImplement the run() method. Then, create a new Thread object, pass the Runnable class to its constructor, and start the Thread by calling the start() method.\nExample:\nclass Loader implements Runnable {\n public void run() {\n   System.out.println("Hello");\n }\n}\nclass MyClass {\n public static void main(String[ ] args) {\n   Thread t = new Thread(new Loader());\n   t.start();\n }\n}\nThe Thread.sleep() method pauses a Thread for a specified period of time. For example, calling Thread.sleep(1000); pauses the thread for one second. Keep in mind that Thread.sleep() throws an InterruptedException, so be sure to surround it with a try/catch block.\nIt may seem that implementing the Runnable interface is a bit more complex than extending from the Thread class. However, implementing the Runnable interface is the preferred way to start a Thread, because it enables you to extend from another class, as well.\n#
q#Exceptions, Lists, Threads, & Files#Threads 	#1 #	#FIB	#Fill in the blanks from the options below to implement the Runnable interface and run a new thread.\n\n\nclass A ____ ____  {\n   public void run() {\n   System.out.println("Bye");\n   }\n}\npublic class App {\n public static void main(String[ ] args) {\n  Thread ob = new Thread(new ____ ());\nob. _____ ();\n   }\n}\n\n Word Bank: A, extends, implements, sleep, start, Runnable \n\n #implements, Runnable, A, start # # # #
c#Exceptions, Lists, Threads, & Files#Threads 	#1 #Types of Exceptions\n\nThere are two exception types, checked and unchecked (also called runtime). The main difference is that checked exceptions are checked when compiled, while unchecked exceptions are checked at runtime.\nAs mentioned in our previous lesson, Thread.sleep() throws an InterruptedException. This is an example of a checked exception. Your code will not compile until you've handled the exception.\n\npublic class MyClass {\n public static void main(String[ ] args) {\n   try {\n     Thread.sleep(1000);\n   } catch (InterruptedException e) {\n     //some code\n   }\n }\n}\n\nWe have seen examples of unchecked exceptions, which are checked at runtime, in previous lessons. Example (when attempting to divide by 0):\npublic class MyClass {\n public static void main(String[ ] args) {\n   int value = 7;\n   value = value / 0;\n }\n}\n/*\nException in thread "main" java.lang.ArithmeticException: / by zero\n at MyClass.main(MyClass.java:4)\n*/\nIt is good to know the Types of Exceptions because they can help you debug your code faster.\n#
q#Exceptions, Lists, Threads, & Files#Threads 	#1 #	#MC	#If not handled, which exception types prevent your program from compiling?\n# Checked #Both checked and runtime# NullPointerException# Runtime#
c#Exceptions, Lists, Threads, & Files#ArrayList #1 #ArrayList\n\nThe Java API provides special classes to store and manipulate groups of objects.\nOne such class is the ArrayList. Standard Java arrays are of a fixed length, which means that after they are created, they cannot expand or shrink.\nOn the other hand, ArrayLists are created with an initial size, but when this size is exceeded, the collection is automatically enlarged.\nWhen objects are removed, the ArrayList may shrink in size. Note that the ArrayList class is in the java.util package, so it's necessary to import it before using it.\nCreate an ArrayList as you would any object.\nimport java.util.ArrayList;\n//...\nArrayList colors = new ArrayList();\n\nYou can optionally specify a capacity and type of objects the ArrayList will hold:\nArrayList<String> colors = new ArrayList<String>(10);\n\nThe code above defines an ArrayList of Strings with 10 as its initial size.\nArrayLists store objects. Thus, the type specified must be a class type. You cannot pass, for example, int as the objects' type. Instead, use the special class types that correspond to the desired value type, such as Integer for int, Double for double, and so on.\n#
q#Exceptions, Lists, Threads, & Files#ArrayList #1 #	#FIB	#Fill in the blanks from the options below to declare an ArrayList to hold 9 Integers.\n\nArrayList< ______ > arr = ______   ______ <Integer>(9);\n\nWord Bank: ArrayList, int, Integer, new, String\n\n#Integer, new, ArrayList # # # #
c#Exceptions, Lists, Threads, & Files#ArrayList #1 #ArrayList\n\nThe ArrayList class provides a number of useful methods for manipulating its objects.\nThe add() method adds new objects to the ArrayList. Conversely, the remove() methods remove objects from the ArrayList.\nExample:\nimport java.util.ArrayList;\npublic class MyClass {\n public static void main(String[ ] args) {\n   ArrayList<String> colors = new ArrayList<String>();\n   colors.add("Red");\n   colors.add("Blue");\n   colors.add("Green");\n   colors.add("Orange");\n   colors.remove("Green");\n   System.out.println(colors);\n }\n}\n// Output: [Red, Blue, Orange]\n\nOther useful methods include the following:\n- contains(): Returns true if the list contains the specified element \n- get(int index): Returns the element at the specified position in the list\n- size(): Returns the number of elements in the list\n- clear(): Removes all of the elements from the list\n\nNote: As with arrays, the indexing starts with 0.\n#
q#Exceptions, Lists, Threads, & Files#ArrayList #1 #	#MC	#What is the output of this code?\n\nArrayList<String> list = new ArrayList<String>();\nlist.add("A");\nlist.add("B");\nlist.add("C");\nSystem.out.println(list.get(1));\n#A #B #C # D#
c#Exceptions, Lists, Threads, & Files#LinkedList #1 #LinkedList\n\nThe LinkedList is very similar in syntax to the ArrayList.\nYou can easily change an ArrayList to a LinkedList by changing the object type.\nimport java.util.LinkedList;\npublic class MyClass {\n public static void main(String[ ] args) {\n   LinkedList<String> c = new LinkedList<String>();\n   c.add("Red");\n   c.add("Blue");\n   c.add("Green");\n   c.add("Orange");\n   c.remove("Green");\n   System.out.println(c);\n }\n}\n// Outputs [Red, Blue, Orange]\nYou cannot specify an initial capacity for the LinkedList.\n#
q#Exceptions, Lists, Threads, & Files#LinkedList #1 #	#FIB	#Fill in the blanks from the options below to create a LinkedList, add "Hey", and print it.\n\n______ <String> list = new LinkedList _____ ();\nlist.add( ____ );\nSystem.out.println(list.get( ____ ));\n\nWord Bank: 0, 1, <String>, “Hey”, LinkedList, String\n#LinkedList, <String>, “Hey”, 0 # # # #
c#Exceptions, Lists, Threads, & Files#LinkedList #1 #LinkedList vs. ArrayList\n\nThe most notable difference between the LinkedList and the ArrayList is in the way they store objects.\nThe ArrayList is better for storing and accessing data, as it is very similar to a normal array.\nThe LinkedList is better for manipulating data, such as making numerous inserts and deletes.\n\nIn addition to storing the object, the LinkedList stores the memory address (or link) of the element that follows it. It's called a LinkedList because each element contains a link to the neighboring element.\n\n12 --> 99 --> 37 --> end\n\nYou can use the enhanced for loop to iterate over its elements.\nLinkedList<String> c = new LinkedList<String>();\nc.add("Red");\nc.add("Blue");\nc.add("Green");\nc.add("Orange");\nc.remove("Green");\n\nfor(String s: c) {\n System.out.println(s);\n}\n/* Output:\nRed\nBlue\nOrange\n*/\nSummary:\n- Use an ArrayList when you need rapid access to your data. \n- Use a LinkedList when you need to make a large number of inserts and/or deletes.\n#
q#Exceptions, Lists, Threads, & Files#LinkedList #1 #	#MC	#For a program with large numbers of inserts and deletes, it is better to use the...\n\n#LinkedList#ArrayList# Array# Strings#
c#Exceptions, Lists, Threads, & Files#HashMap	 #1 #HashMap\n\nArrays and Lists store elements as ordered collections, with each element given an integer index.\nHashMap is used for storing data collections as key and value pairs. One object is used as a key (index) to another object (the value). \nThe put, remove, and get methods are used to add, delete, and access values in the HashMap.\nExample:\nimport java.util.HashMap;\npublic class MyClass {\n public static void main(String[ ] args) {\n   HashMap<String, Integer> points = new HashMap<String, Integer>();\n   points.put("Amy", 154);\n   points.put("Dave", 42);\n   points.put("Rob", 733);\n   System.out.println(points.get("Dave"));\n }\n}\n// Outputs 42\nWe have created a HashMap with Strings as its keys and Integers as its values.\nUse the get method and the corresponding key to access the HashMap elements.\n#
q#Exceptions, Lists, Threads, & Files#HashMap	 #1 #	#MC	#What is the output of this code?\nimport java.util.HashMap;\nclass A {	\n  public static void main(String[ ] args) {\n  HashMap<String, String> m = new HashMap<String, String>();\n  m.put("A", "First");\n  m.put("B", "Second");\n  m.put("C", "Third");\n  System.out.println(m.get("B"));\n  }\n}\n\n#Second#First#Third#Nothing#
c#Exceptions, Lists, Threads, & Files#HashMap	 #1 #HashMap\n\nA HashMap cannot contain duplicate keys. Adding a new item with a key that already exists overwrites the old element.\nThe HashMap class provides containsKey and containsValue methods that determine the presence of a specified key or value.\nIf you try to get a value that is not present in your map, it returns the value of null. \nnull is a special type that represents the absence of a value.\n#
q#Exceptions, Lists, Threads, & Files#HashMap	 #1 #	#FIB	#Fill in the blanks to declare a HashMap, add two items, and print one of them.\nHashMap<String, String> m = ____ HashMap<String, String>();\nm.put("A", "First");\nm. ____("B", "Second");\nSystem.out.println(m. ____ ("B"));\n#new, put, get# # # #
c#Exceptions, Lists, Threads, & Files#Sets	 #1 #Sets\n\nA Set is a collection that cannot contain duplicate elements. It models the mathematical set abstraction.\nOne of the implementations of the Set is the HashSet class.\nExample:\nimport java.util.HashSet\npublic class MyClass {\n public static void main(String[ ] args) {\n   HashSet<String> set = new HashSet<String>();\n   set.add("A");\n   set.add("B");\n   set.add("C");\n   System.out.println(set);\n }\n}\n//  Output: [A, B, C]\nYou can use the size() method to get the number of elements in the HashSet.\n#
q#Exceptions, Lists, Threads, & Files#Sets	 #1 #	#MC	#What is the output of this code?\nimport java.util.HashSet;\nclass A {\n  public static void main(String[ ] args) {\n  HashSet<String> set = new HashSet<String>();\n  set.add("A");\n  set.add("B");	\n  set.add("C");\n  System.out.println(set.size());\n  }\n}\n\n#3#2#0#null#
c#Exceptions, Lists, Threads, & Files#Sets	 #1 #LinkedHashSet\n\nThe HashSet class does not automatically retain the order of the elements as they're added. To order the elements, use a LinkedHashSet, which maintains a linked list of the set's elements in the order in which they were inserted.\n\nWhat is hashing?\nA hash table stores information through a mechanism called hashing, in which a key's informational content is used to determine a unique value called a hash code.\nSo, basically, each element in the HashSet is associated with its unique hash code. \nYou've learned about the various collection types that are available in Java, including Lists, Maps, and Sets. The choice of which one to use is specific to the data you need to store and manipulate.\n#
q#Exceptions, Lists, Threads, & Files#Sets	 #1 #	#MC	#Which two of the following statements are true?\nA. Set contains only unique values.\nB. Set can contain duplicate values.\nC. HashSet does not retain order.\nD. LinkedHashSet does not retain order.\n#A,C#B,D#A,D#B,C#
c#Exceptions, Lists, Threads, & Files#Sets	 #1 #Sorting Lists\n\nFor the manipulation of data in different collection types, the Java API provides a Collections class, which is included in the java.util package. \nOne of the most popular Collections class methods is sort(), which sorts the elements of your collection type. The methods in the Collections class are static, so you don't need a Collections object to call them.\nExample:\npublic class MyClass {\n public static void main(String[ ] args) {\n   ArrayList<String> animals = new ArrayList<String>();\n   animals.add("tiger");\n   animals.add("cat");\n   animals.add("snake");\n   animals.add("dog");\n   Collections.sort(animals);     \n   System.out.println(animals);\n }\n}\n/* Outputs:\n[cat, dog, snake, tiger]\n*/\nAs you can see, the elements have been sorted alphabetically.\n#
q#Exceptions, Lists, Threads, & Files#Sets	 #1 #	#MC	#What is the output of this code?\nList<String> list = new ArrayList<String>();\nlist.add("b");\nlist.add("a");\nlist.add("c");\nCollections.sort(list);\nSystem.out.println(list.get(0));\n\n#a#b#c#null#
c#Exceptions, Lists, Threads, & Files#Sets	 #1 #Sorting Lists\n\nYou can call the sort() methods on different types of Lists, such as Integers.\nimport java.util.ArrayList;\nimport java.util.Collections;\npublic class MyClass {\n public static void main(String[ ] args) {\n   ArrayList<Integer> nums = new ArrayList<Integer>();\n   nums.add(3);\n   nums.add(36);\n   nums.add(73);\n   nums.add(40);\n   nums.add(1);\n\n   Collections.sort(nums);\n   System.out.println(nums);\n }\n}\n/* Outputs:\n[1, 3, 36, 40, 73]\n*/\nOther useful methods in the Collections class:\nmax(Collection c): Returns the maximum element in c as determined by natural ordering.\nmin(Collection c): Returns the minimum element in c as determined by natural ordering.\nreverse(List list): Reverses the sequence in list.\nshuffle(List list): Shuffles (i.e., randomizes) the elements in list.\n#
q#Exceptions, Lists, Threads, & Files#Sets	 #1 #	#MC	#Fill in the blanks to add three items to the list, sort it,  and print 2.\nList<Integer> list = new ArrayList<Integer>();\nlist. ____ (4);\nlist.add(2);\n ____ .add(1);\nCollections. ____ (list);\nSystem.out.println(list.get(___));\n\n#add, list, sort, 1# # # #
c#Exceptions, Lists, Threads, & Files#Iterators	 #1 #Iterators\n\nAn Iterator is an object that enables to cycle through a collection, obtain or remove elements. \nBefore you can access a collection through an iterator, you must obtain one. Each of the collection classes provides an iterator() method that returns an iterator to the start of the collection. By using this iterator object, you can access each element in the collection, one element at a time.\n\nThe Iterator class provides the following methods:\nhasNext(): Returns true if there is at least one more element; otherwise, it returns false.\nnext(): Returns the next object and advances the iterator.\nremove(): Removes the last object that was returned by next from the collection.\n\nThe Iterator class must be imported from the java.util package.\nExample:\nimport java.util.Iterator;\nimport java.util.LinkedList;\npublic class MyClass {\n  public static void main(String[ ] args) {\n LinkedList<String> animals = new LinkedList<String>();\n animals.add("fox");\n animals.add("cat");\n animals.add("dog");\n animals.add("rabbit");\n\n Iterator<String> it = animals.iterator();\n String value = it.next();\n System.out.println(value);\n}\n}\n//Outputs "fox"\nit.next() returns the first element in the list and then moves the iterator on to the next element.\nEach time you call it.next(), the iterator moves to the next element of the list.\n#
q#Exceptions, Lists, Threads, & Files#Iterators	 #1 #	#MC	#What is the output of this code?\nList<Integer> list = new ArrayList<Integer>();\nlist.add(10);\nlist.add(20);\nlist.add(30);\nIterator<Integer> it = list.iterator();\nit.next();\nSystem.out.println(it.next());\n\n#20#10#30#null#
c#Exceptions, Lists, Threads, & Files#Iterators	 #1 #Iterators\n\nTypically, iterators are used in loops. At each iteration of the loop, you can access the corresponding list element.\nExample:\nimport java.util.Iterator;\nimport java.util.LinkedList;\n\npublic class MyClass {\n public static void main(String[ ] args) {\n   LinkedList<String> animals = new LinkedList<String>();\n   animals.add("fox");\n   animals.add("cat");\n   animals.add("dog");\n   animals.add("rabbit");\n   \n   Iterator<String> it = animals.iterator();\n  while(it.hasNext()) {\n     String value = it.next();\n     System.out.println(value);  \n    }\n }\n}\n/*\nfox\ncat\ndog\nrabbit\n*/\nHere, the while loop determines whether the iterator has additional elements, prints the value of the element, and advances the iterator to the next.\n#
q#Exceptions, Lists, Threads, & Files#Iterators	 #1 #	#FIB	#Fill in the blanks from the options below to iterate and print all of the items in the list of Integers.\n\n______ < _______ > it = list. _____ ();\nwhile (it. _____ ()) {\n  System.out.println(it. _____ ()); \n}\nWord Bank: hasNext, Integer, int, Iterator, iterator, next\n#Iterator, Integer, iterator, hasNext, next# # # #
c#Exceptions, Lists, Threads, & Files#Working with Files	 #1 #Working with Files\n\nThe java.io package includes a File class that allows you to work with files.\nTo start, create a File object and specify the path of the file in the constructor.\nimport java.io.File;\n...\nFile file = new File("C:\\data\\input-file.txt");\n\nWith the exists() method, you can determine whether a file exists.\nimport java.io.File;\n\npublic class MyClass {\n public static void main(String[ ] args) {\n   File x = new File("C:\\sololearn\\test.txt");\n   if(x.exists()) {\n    System.out.println(x.getName() +  "exists!");\n   }\n   else {\n    System.out.println("The file does not exist");\n   }\n }\n}\n\nThe code above prints a message stating whether or not the file exists at the specified path.\nThe getName() method returns the name of the file.\nNote that we used double backslashes in the path, as one backslash should be escaped in the path String.\n#
q#Exceptions, Lists, Threads, & Files#Working with Files	 #1 #	#FIB	#Fill in the blanks to determine whether the file exists.\nclass A {\n   public static void main(String args[ ]) {\n   File file = ___ File("a.txt");\n   if(file. ____()) {\n     System.out.println("Yes");\n   }\n}\n}\n\n#new, exists# # # #
c#Exceptions, Lists, Threads, & Files#Working with Files	 #1 #Reading a File\n\nFiles are useful for storing and retrieving data, and there are a number of ways to read from a file.\nOne of the simplest ways is to use the Scanner class from the java.util package.\nThe constructor of the Scanner class can take a File object as input.\nTo read the contents of a text file at the path "C:\\alackquander\\test.txt", we would need to create a File object with the corresponding path and pass it to the Scanner object.\ntry {\n File x = new File("C:\\alackquander\\test.txt");\n Scanner sc = new Scanner(x);     \n}\ncatch (FileNotFoundException e) {\n\n}\n\nWe surrounded the code with a try/catch block, because there's a chance that the file may not exist.\n#
q#Exceptions, Lists, Threads, & Files#Working with Files	 #1 #	#MC	#Which class can be used for reading files?\n\n#Scanner#Set#ArrayList#HashMap#
c#Exceptions, Lists, Threads, & Files#Working with Files	 #1 #Reading a File\n\nThe Scanner class inherits from the Iterator, so it behaves like one.\nWe can use the Scanner object's next() method to read the file's contents.\ntry {\n File x = new File("C:\\sololearn\\test.txt");\n Scanner sc = new Scanner(x);\nwhile(sc.hasNext()) {\n   System.out.println(sc.next());\n }\n sc.close();\n} catch (FileNotFoundException e) {\n System.out.println("Error");\n}\n\nThe file's contents are output word by word, because the next() method returns each word separately.\nIt is always good practice to close a file when finished working with it. One way to do this is to use the Scanner's close() method.\n#
q#Exceptions, Lists, Threads, & Files#Working with Files	 #1 #	#FIB	#Fill in the blanks from the options below to read and print the content of the file a.txt, and then close it.\ntry {\n   File f = new File("a.txt");\nScanner sc = new _____ (f);\n  while (sc.hasNext()) {\n      String a = _____ .next();\n      String b = sc. ____ ();\n      System.out.println(a + " " + b);\n  } \n  sc. _____ ();\n} \ncatch (Exception e) {\n   System.out.println("Error");\n}\nWord Bank: close, File, new, next, sc, Scanner \n#Scanner, sc, next, close # # # #
c#Exceptions, Lists, Threads, & Files#Working with Files	 #1 #Creating Files\n\nFormatter, another useful class in the java.util package, is used to create content and write it to files.\nExample:\nimport java.util.Formatter;\n\npublic class MyClass {\n  public static void main(String[ ] args) {\n try {\n   Formatter f = new Formatter("C:\\alackquander\\test.txt");\n } catch (Exception e) {\n     System.out.println("Error");\n }\n }\n}\n\nThis creates an empty file at the specified path. If the file already exists, this will overwrite it.\nAgain, you need to surround the code with a try/catch block, as the operation can fail.\n#
q#Exceptions, Lists, Threads, & Files#Working with Files	 #1 #	#MC	#Which class is used to write content to files?\n#Formatter #Set #Scanner #ArrayList#
c#Exceptions, Lists, Threads, & Files#Working with Files	 #1 #Writing to Files\n\nOnce the file is created, you can write content to it using the same Formatter object's format() method.\nExample:\nimport java.util.Formatter;\n\npublic class MyClass {\n  public static void main(String[ ] args) {\n try {\n   Formatter f = new Formatter("C:\\alackquander\\test.txt");\n   f.format("%s %s %s", "1","John", "Smith \r\n");\n   f.format("%s %s %s", "2","Amy", "Brown");\n   f.close();   \n } catch (Exception e) {\n   System.out.println("Error");\n }\n }\n}\nThe format() method formats its parameters according to its first parameter. \n%s mean a string and get's replaced by the first parameter after the format. The second %s get's replaced by the next one, and so on. So, the format %s %s %s denotes three strings that are separated with spaces.\nNote: \r\n is the newline symbol in Windows.\nThe code above creates a file with the following content:\n1 John Smith\n2 Amy Brown\n\nDon't forget to close the file once you're finished writing to it!\n#
q#Exceptions, Lists, Threads, & Files#Working with Files	 #1 #	#FIB	#Write "Hi there" to the file.\nFormatter ____ = new Formatter("a.txt");\nf.______("%s", "Hi ");\nf.format("%s", "_____");\nf.close();\n\n#f, format, there# # # #
q#Exceptions, Lists, Threads, & Files#Quiz	 		 #1 #	#FIB	#Fill in the blanks to declare a function that takes two integers as arguments and prints their division. Handle the possible exception.\n\n\nvoid myFunc(int a, ___ b) {\n  ___  {\n    System.out.println(a __ b);\n  }\n  _______ (Exception e) {\n     System.out.println("Error");\n  }\n}\n\n#int, try, /, catch# # # #
q#Exceptions, Lists, Threads, & Files#Quiz	 		 #1 #	#FIB	#Fill in the blanks to define a function ''myFunc'', which throws an exception if its parameter is less than 0.\n\n\nvoid myFunc(int arg)\n______  IllegalArgumentException\n{\n  ___  (arg < ___)   throw _____  IllegalArgumentException();\n}\n\n#throws, if, 0, new # # # #
q#Exceptions, Lists, Threads, & Files#Quiz	 		 #1 #	#MC	#How many lines of output will this code produce?\nclass B implements Runnable {\n  public void run() {\n    System.out.println("B");	\n  }\n}\nclass A extends Thread {\n  public void run() {\n   System.out.println("A");\n   Thread t = new Thread(new B());\n   t.start();\n  }\npublic static void main(String[ ] args) {\n  A object = new A();\n  object.start();\n  }\n}\n\n#2#1#0#4#
q#Exceptions, Lists, Threads, & Files#Quiz	 		 #1 #	#MC	#Which two options allow you to create new threads?\nA. name your class "Thread"\nB. implement Runnable\nC. handle exceptions\nD. extend the Thread class\n\n#B, D # A, C #A, B # C,D#
q#Exceptions, Lists, Threads, & Files#Quiz	 		 #1 #	#MC	#What is the output of this code?\nArrayList<Integer> list = new ArrayList<Integer>();\nfor (int i = 0; i < 6; i++) {\n	list.add(i);\n}\nint x = 0;\nIterator<Integer> it = list.iterator();\nwhile (it.hasNext()) {\n	x+= it.next();	\n}\nSystem.out.println(x);\n \n#15 #21# 11# 14#
q#Exceptions, Lists, Threads, & Files#Quiz	 		 #1 #	#MC	#What is the output of the following code?\nint f=1, i=2;\nwhile(++i<5)\n  f*=i;\nSystem.out.println(f);\n\n#12#24#120#60#























